; OM File Header - Saved 2025/03/09 13:31:10
; (6.010003 :patc (om-make-point 401 127) (om-make-point 50 50) (om-make-point 770 555) "No documentation " 183 0 nil "2023/04/09 22:59:31")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "tutorial_16" (quote ((om-load-boxcomment "comment1112" (om-make-point 299 36) (quote "TUTORIAL 16 - Introduction to OMLOOP II") "" (om-make-point 194 27) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 19 23) (quote "B") "" (om-make-point 307 195) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 82 22) (quote "series of notes") "" (om-make-point 225 75) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 192 102) (om-make-point 80 95) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100 6000 6600 6500 7600)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) thechord) "x" nil (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale)) (list (quote :midishare) (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil)) t nil nil nil) (om-load-boxcomment "comment1" (om-make-point 19 23) (quote "D") "" (om-make-point 187 346) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 19 23) (quote "C") "" (om-make-point 211 250) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 19 23) (quote "A") "" (om-make-point 202 76) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 181 321) (om-make-point 307 110) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8200 7100 6000) (7100 6000 4900) (7700 6600 5500) (7600 6500 5400) (8700 7600 6500))) :lonset (quote (0 1000 2000 3000 4000 5000)) :ldur (quote ((1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000))) :lvel (quote ((100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom deltapict cmnpref staff fontsize approx outport inport scale)) (list (quote :midishare) (quote t) 0 0 2621450 18350450 0 1000 nil 1 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 28 2 0 0 nil)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 119 21) (quote "symmetry Interval") "" (om-make-point 320 194) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 270 200) (om-make-point 32 25) 1100 "1100" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 231 242) nil nil nil (list (om-load-boxcomment "comment" (om-make-point 18 21) (quote "D") "" (om-make-point 148 346) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 18 21) (quote "C") "" (om-make-point 188 267) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 18 21) (quote "B") "" (om-make-point 181 208) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 18 21) (quote "A") "" (om-make-point 112 134) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "trio1" (om-load-patch-abs1 "trio" (quote ((om-load-boxin "input1" 1 (om-make-point 204 0) "no documentation" "interval" nil nil) (om-load-boxin "input" 0 (om-make-point 59 0) "no documentation" "Pivot" nil nil) (om-load-boxout "output" 0 (om-make-point 120 280) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcomment "comment" (om-make-point 71 24) (quote "Lower note") "" (om-make-point 241 160) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 59 27) (quote "upper note") "" (om-make-point 2 158) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 70 234) (om-make-point 143 37) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 204 156) (om-make-point 37 27) nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 62 154) (om-make-point 39 35) nil nil nil 1))) (quote ((5 0 2 0 nil 0) (7 0 5 0 nil 0) (1 0 5 1 ((om-make-point 75 51) (om-make-point 99 112) (om-make-point 125 181) (om-make-point 142 234)) 3) (6 0 5 2 nil 0) (1 0 6 0 ((om-make-point 75 51) (om-make-point 129 92) (om-make-point 196 141) (om-make-point 216 156)) 3) (0 0 6 1 nil 2) (1 0 7 0 nil 3) (0 0 7 1 ((om-make-point 228 51) (om-make-point 188 81) (om-make-point 153 107) (om-make-point 88 154)) 2))) 6.010003 nil "") (quote ((om-load-inputfun (quote input-funbox) "no documentation" "Pivot" nil) (om-load-inputfun (quote input-funbox) "no documentation" "interval" nil))) (om-make-point 206 191) nil nil nil nil) (om-load-boxin "input1" 1 (om-make-point 213 45) "no documentation" "symmetry Interval" nil nil) (om-load-boxin "input0" 0 (om-make-point 136 45) "no documentation" "Pitch list" nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 124 126) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 203 257) nil nil nil nil 3) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 227 337) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 168 338) nil nil nil 0)) (quote ((7 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 7 0 nil 0) (4 0 8 0 nil 0) (8 1 9 0 nil 0) (8 0 10 0 nil 0))) 1 "omloop" nil))) (quote ((10 0 7 1 nil 0) (3 1 10 0 nil 0) (9 0 10 1 nil 0))) nil 6.010003))

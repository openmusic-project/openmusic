; OM File Header - Saved 2025/03/09 13:31:10
; (6.050101 :patc (om-make-point 224 128) (om-make-point 183 110) (om-make-point 815 721) "No documentation " 183 0 nil "2023/04/09 22:59:31")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "tutorial-13" (quote ((om-load-boxcomment "comment1112" (om-make-point 344 47) (quote "TUTORIAL 13 - Another random sequence:  Introduction to durations, vels and legato") "" (om-make-point 144 24) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment11111" (om-make-point 19 25) (quote "F") "" (om-make-point 173 98) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1111" (om-make-point 19 25) (quote "E") "" (om-make-point 372 130) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment111" (om-make-point 19 25) (quote "D") "" (om-make-point 212 369) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment11" (om-make-point 19 25) (quote "C") "" (om-make-point 279 324) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 19 25) (quote "B") "" (om-make-point 233 130) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 19 25) (quote "A") "" (om-make-point 126 131) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 46 20) (quote "Velocity") "" (om-make-point 386 138) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 108 25) (quote "Onsets & Durations") "" (om-make-point 247 130) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 46 20) (quote "Notes") "" (om-make-point 139 131) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 10))) (om-make-point 420 312) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 0))) (om-make-point 376 191) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 380 158) (om-make-point 21 24) 10 "10" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 412 158) (om-make-point 31 24) 120 "120" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 217 325) (om-make-point 24 27) 0 "0" nil) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 227 361) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 137 441) (om-make-point 346 118) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5300) (4700) (4200) (6400) (6300) (5000) (7300) (6800) (7700) (6500) (6400) (7400) (7700) (8000) (5400) (6900) (4200) (7700) (5700) (5300) (7600) (5600) (6800) (6200) (4500) (8200) (7300) (7200) (5600) (6700))) :lonset (quote (0 420 810 1010 1400 1710 1910 2150 2560 2740 2960 3340 3560 3760 4100 4450 4580 4930 5430 5810 6240 6450 6610 6950 7340 7510 7990 8130 8430 8890 9200)) :ldur (quote ((420) (390) (200) (390) (310) (200) (240) (410) (180) (220) (380) (220) (200) (340) (350) (130) (350) (500) (380) (430) (210) (160) (340) (390) (170) (480) (140) (300) (460) (310))) :lvel (quote ((93) (88) (113) (80) (48) (36) (66) (68) (113) (119) (78) (29) (61) (66) (51) (118) (35) (38) (55) (120) (54) (52) (66) (15) (99) (35) (64) (103) (33) (33))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (show-stems obj-mode palette-mode inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos scale player)) (list (quote t) 0 0 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 1 nil 1000 0 18350450 2621450 nil (quote :midishare))) t nil nil nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 197 99) (om-make-point 63 24) 30 "30" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 304 225) (om-make-point 32 29) 10 "10" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 268 273) (om-make-point 61 35) nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 282 158) (om-make-point 25 27) 50 "50" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 249 158) (om-make-point 24 28) 10 "10" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 0))) (om-make-point 245 191) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 10))) (om-make-point 289 318) nil (list (list 210 470 280 170 130 150 430 100 350 250 340 470 290 120 330 320 100 470 160 400 340 310 480 500 180 340 370 360 450 150)) "&" nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 10))) (om-make-point 159 319) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 0))) (om-make-point 121 182) (om-make-point 86 58) nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 127 153) (om-make-point 21 25) 42 "42" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 181 153) (om-make-point 27 28) 82 "82" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 146 271) (om-make-point 61 35) nil nil nil 1) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 182 239) (om-make-point 26 26) 100 "100" nil))) (quote ((11 0 10 0 nil 0) (17 0 10 1 ((om-make-point 227 121) (om-make-point 449 122) (om-make-point 449 143) (om-make-point 450 312)) 0) (12 0 11 0 nil 0) (13 0 11 1 nil 0) (14 0 15 0 nil 0) (23 0 15 1 nil 0) (24 0 16 1 nil 0) (15 0 16 2 nil 0) (23 0 16 3 nil 0) (10 0 16 4 nil 0) (22 0 19 0 nil 0) (18 0 19 1 nil 0) (21 0 22 0 nil 0) (20 0 22 1 nil 0) (19 0 23 0 nil 0) (17 0 23 1 ((om-make-point 227 121) (om-make-point 355 122) (om-make-point 355 216) (om-make-point 319 318)) 0) (28 0 24 0 nil 0) (17 0 24 1 ((om-make-point 227 121) (om-make-point 211 120) (om-make-point 211 302) (om-make-point 189 319)) 0) (26 0 25 0 nil 0) (27 0 25 1 nil 0) (25 0 28 0 nil 0) (29 0 28 1 nil 0))) nil 6.050101))

; OM File Header - Saved 2023/04/09 18:12:58
; (6.050101 :patc (om-make-point 147 41) (om-make-point 50 50) (om-make-point 719 551) "No documentation " 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "trereverse_patch" (quote ((om-load-boxcomment "comment1112" (om-make-point 317 37) (quote "TUTORIAL 39 - Recursive Patch (II)") "" (om-make-point 161 17) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote patch-box) "treereverse1" (quote ("elements" "tutorial patches" "tutorial_39" "treereverse")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "tree" nil))) (om-make-point 74 265) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxin "input" 0 (om-make-point 207 17) "no documentation" nil nil nil) (om-load-boxout "output" 0 (om-make-point 136 532) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 199 89) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "the list" "MATRIX" nil))) (om-make-point 193 151) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 345 225) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 343 275) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 335 348) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 295 285) nil nil "l" nil 1) (om-load-boxcall (quote lispfun) "MAPCAR1" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 137 399) (om-make-point 286 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 203 243) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 199 349) nil nil "l" nil 1) (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 38 487) (om-make-point 236 37) nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 86 423) (om-make-point 31 35) (quote ?) "?" nil))) (quote ((11 0 1 0 nil 0) (0 0 2 0 nil 0) (2 0 3 0 nil 0) (3 0 4 0 nil 0) (4 0 5 0 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (10 0 8 0 nil 0) (9 0 8 1 nil 0) (6 0 8 2 nil 0) (3 0 9 0 nil 0) (12 0 11 0 nil 0) (8 0 11 1 nil 0))) 6.010003 nil "") (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 395 265) nil nil nil nil) (om-load-boxcomment "comment" (om-make-point 74 45) (quote "Right!") "" (om-make-point 99 442) nil (om-make-color 4/5 7/51 4/17) (om-make-font "Helvetica" 18 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 82 40) (quote "Wrong!") "" (om-make-point 413 448) nil (om-make-color 4/5 7/51 4/17) (om-make-font "Helvetica" 18 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 -2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))) (om-load-inputfun (quote input-funbox) "CHORDS" "CHORDS" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord))) (om-load-inputfun (quote input-funbox) "TEMPO" "TEMPO" 60) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100) (om-load-inputfun (quote input-funbox) "TIES" "TIES" nil))) (om-make-point 331 347) (om-make-point 297 90) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (-1 3)) ((4 4) (1 1 (1 (1 -2 1 1)) 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (3000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport palette-mode obj-mode show-stems scale)) (list (quote :midishare) 2621450 18350450 0 1000 nil 1 2 24 (quote empty) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 0 0 (quote t) nil)) t nil nil nil) (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 -2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))) (om-load-inputfun (quote input-funbox) "CHORDS" "CHORDS" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord))) (om-load-inputfun (quote input-funbox) "TEMPO" "TEMPO" 60) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100) (om-load-inputfun (quote input-funbox) "TIES" "TIES" nil))) (om-make-point 14 347) (om-make-point 299 92) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (-1 3)) ((4 4) (1 1 (1 (1 1 -2 1)) 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (3000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport palette-mode obj-mode show-stems scale)) (list (quote :midishare) 2621450 18350450 0 1000 nil 1 2 24 (quote empty) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 0 0 (quote t) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 123 89) (om-make-point 282 27) (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 -2 1 1)) 1 1)) (list (quote |4//4|) (list 3 -1)))) "(? ((4//4 (1 (1 (1 -2 1 1)) 1 1)) (4//4 (3 -1))))" nil) (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 -2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))) (om-load-inputfun (quote input-funbox) "CHORDS" "CHORDS" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord))) (om-load-inputfun (quote input-funbox) "TEMPO" "TEMPO" 60) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100) (om-load-inputfun (quote input-funbox) "TIES" "TIES" nil))) (om-make-point 165 128) (om-make-point 220 99) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (1 (1 (1 -2 1 1)) 1 1)) ((4 4) (3 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (3000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport palette-mode obj-mode show-stems scale)) (list (quote :midishare) 2621450 18350450 0 1000 nil 1 2 24 (quote empty) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 0 0 (quote t) nil)) t nil nil nil))) (quote ((8 1 1 0 nil 0) (8 1 2 0 nil 0) (2 0 5 1 nil 0) (1 0 6 1 nil 0) (7 0 8 1 nil 0))) nil 6.010003))

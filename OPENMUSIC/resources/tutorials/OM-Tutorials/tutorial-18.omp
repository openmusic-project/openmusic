; OM File Header - Saved 2025/03/09 13:31:10
; (6.050101 :patc (om-make-point 522 128) (om-make-point 18 267) (om-make-point 802 739) "No documentation " 183 0 nil "2023/04/09 18:13:49")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "tutorial_18" (quote ((om-load-boxcomment "comment1112" (om-make-point 402 52) (quote "TUTORIAL 18 - Generation of a note sequence by interpolation between two chords") "" (om-make-point 170 7) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment1111" (om-make-point 16 21) (quote "F") "" (om-make-point 351 426) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 234 367) (om-make-point 69 67) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((2300 2900 3300 2800 4500 4100) (2691 3500 3800 3282 4782 4509) (3082 4100 4300 3764 5064 4918) (3473 4700 4800 4245 5345 5327) (3864 5300 5300 4727 5627 5736) (4255 5900 5800 5209 5909 6145) (4645 6500 6300 5691 6191 6555) (5036 7100 6800 6173 6473 6964) (5427 7700 7300 6655 6755 7373) (5818 8300 7800 7136 7036 7782) (6209 8900 8300 7618 7318 8191) (6600 9500 8800 8100 7600 8600))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000)) :ldur (quote ((1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player scale inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list (quote :midishare) nil 0 0 (om-make-point 0 -29) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2 1 nil 1000 0 18350450 2621450 0 0 (quote t))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 537 460) (om-make-point 35 30) 100 "100" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 409 240) (om-make-point 32 30) 1.0 "1.0" nil) (om-load-boxcomment "comment111" (om-make-point 16 21) (quote "E") "" (om-make-point 347 369) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment11" (om-make-point 16 21) (quote "D") "" (om-make-point 226 343) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 16 21) (quote "C") "" (om-make-point 271 283) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 16 21) (quote "B") "" (om-make-point 419 177) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 16 21) (quote "A") "" (om-make-point 257 174) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 379 240) (om-make-point 28 30) 12 "12" nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 353 76) (om-make-point 56 150) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 9500 8800 8100 7600 8600)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) thechord) "x" nil (pairlis (quote (player scale inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list (quote :midishare) nil 0 0 (om-make-point 0 -20) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2 1 nil 1000 0 18350450 2621450 0 0 (quote t))) t nil nil nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 284 76) (om-make-point 58 148) (let ((thechord (make-instance (quote chord) :lmidic (quote (2300 2900 3300 2800 4500 4100)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) thechord) "x" nil (pairlis (quote (player scale inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list (quote :midishare) nil 0 0 (om-make-point 0 -22) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2 1 nil 1000 0 18350450 2621450 0 0 (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 406 331) (om-make-point 23 20) 4 "4" nil) (om-load-boxcall (quote genfun) "INTERPOLATION" (quote interpolation) (quote ((om-load-inputfun (quote input-funbox) "a number" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "a number" "END" 1) (om-load-inputfun (quote input-funbox) "an integer" "SAMPLES" 5) (om-load-inputfun (quote input-funbox) "a number in [0.0 2.0]" "CURVE" 1.0))) (om-make-point 299 272) (om-make-point 152 53) nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 373 355) nil nil nil (list (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 145 373) (om-make-point 53 53) nil nil 0) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 207 373) (om-make-point 47 53) nil nil 0) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 161 281) (om-make-point 47 53) nil nil nil 3) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 5))) (om-make-point 129 219) (om-make-point 116 53) nil nil nil 1) (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil))) (om-make-point 99 149) (om-make-point 65 53) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 107 90) (om-make-point 53 53) nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 115 29) "no documentation" nil nil nil) (om-load-boxin "input1" 1 (om-make-point 179 31) "no documentation" "n-samples" nil nil)) (quote ((2 0 0 0 nil 0) (2 1 1 0 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (7 0 3 1 nil 0) (5 0 4 0 nil 0) (6 0 5 0 nil 0))) 1 "omloop" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 377 421) (om-make-point 29 53) nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 422 458) (om-make-point 49 30) (list 0 75) "(0 75)" nil) (om-load-editor-box1 "CHORD-SEQ1" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100))) (om-make-point 349 495) (om-make-point 228 162) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((2300) (2300) (4500) (2900) (3500) (4509) (3282) (3282) (4918) (5064) (4100) (3082) (4800) (3473) (4700) (4800) (4727) (3864) (5627) (4727) (5900) (6145) (5900) (5800) (6300) (6300) (5691) (6500) (6800) (7100) (6473) (6473) (6755) (6655) (5427) (7300) (7800) (8300) (7136) (7036) (7318) (8900) (7318) (8300) (6600) (9500) (9500) (9500))) :lonset (quote (0 75 150 225 300 375 450 525 600 675 750 825 900 975 1050 1125 1200 1275 1350 1425 1500 1575 1650 1725 1800 1875 1950 2025 2100 2175 2250 2325 2400 2475 2550 2625 2700 2775 2850 2925 3000 3075 3150 3225 3300 3375 3450 3525 3600)) :ldur (quote ((75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75) (75))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player scale inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list (quote :midishare) nil 0 0 (om-make-point 0 -16) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2 1 nil 1000 0 18350450 2621450 0 0 (quote t))) t nil nil nil))) (quote ((14 0 2 1 nil 0) (12 1 14 0 nil 0) (11 1 14 1 nil 0) (10 0 14 2 nil 0) (4 0 14 3 nil 0) (14 0 15 0 nil 0) (13 0 15 1 nil 0) (15 0 16 0 nil 0) (16 0 18 1 nil 0) (17 0 18 2 nil 0) (3 0 18 7 nil 0))) nil 6.010003))

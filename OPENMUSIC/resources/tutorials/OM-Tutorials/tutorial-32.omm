; OM File Header - Saved 2025/03/09 13:31:10
; (6.050101 :maqt (om-make-point 282 234) (om-make-point 50 50) (om-make-point 500 400) "No documentation " 182 0 nil "2023/04/09 18:13:49")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-maq2 "tutorial-32" (quote ((om-load-tempobj1 "tempobj1" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj1" (quote ((om-load-boxcall (quote abstraction) "tutorial_12" (om-load-patch-abs1 "tutorial_12" (quote ((om-load-boxout "output" 0 (om-make-point 61 574) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcomment "comment11111" (om-make-point 18 24) (quote "F") "" (om-make-point 282 468) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1111" (om-make-point 18 24) (quote "E") "" (om-make-point 155 396) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment111" (om-make-point 18 24) (quote "D") "" (om-make-point 213 48) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 18 24) (quote "A") "" (om-make-point 77 112) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 292 28) (om-make-point 25 30) 6 "6" nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 248 26) (om-make-point 22 25) 2 "2" nil) (om-load-boxcall (quote genfun) "OM*1" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 356 252) (om-make-point 61 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-RANDOM1" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 2) (om-load-inputfun (quote input-funbox) "max" "HIGH" 6))) (om-make-point 250 58) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 273 493) (om-make-point 42 30) (list 100) "(100)" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 219 493) (om-make-point 44 28) (list 0 100) "(0 100)" nil) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil))) (om-make-point 183 384) (om-make-point 180 53) nil nil nil 1) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 406 204) (om-make-point 33 31) 100 "100" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 359 136) (om-make-point 31 25) 82 "82" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 324 136) (om-make-point 27 27) 42 "42" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 0))) (om-make-point 333 170) nil (list 47) "&" nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 10))) (om-make-point 366 300) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 10))) (om-make-point 249 302) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 0))) (om-make-point 216 171) nil (list 46) "&" nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 218 137) (om-make-point 26 26) 42 "42" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 253 138) (om-make-point 42 31) 82 "82" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 239 254) (om-make-point 61 35) nil nil nil 1) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 275 204) (om-make-point 33 20) 100 "100" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 164 208) (om-make-point 34 35) 100 "100" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 126 256) (om-make-point 61 35) nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 140 141) (om-make-point 30 30) 82 "82" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 107 141) (om-make-point 28 28) 42 "42" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 0))) (om-make-point 103 174) nil (list 71) "&" nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 10))) (om-make-point 136 304) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 142 529) (om-make-point 264 107) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6800) (6800) (6800) (4700) (4700) (4700) (4700) (4700) (4700) (4800) (4800) (4800) (4800))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400)) :ldur (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos show-stems scale player)) (list 0 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 4) 0 0 1 nil 1000 0 18350450 2621450 (quote t) nil (quote :midishare))) t nil nil nil))) (quote ((29 0 0 0 nil 0) (15 0 7 0 nil 0) (12 0 7 1 nil 0) (6 0 8 0 nil 0) (5 0 8 1 nil 0) (28 0 11 0 nil 0) (17 0 11 1 nil 0) (16 0 11 2 nil 0) (14 0 15 0 nil 0) (13 0 15 1 nil 0) (7 0 16 0 nil 0) (8 0 16 1 ((om-make-point 278 109) (om-make-point 402 109) (om-make-point 402 191) (om-make-point 402 300)) 0) (21 0 17 0 nil 0) (8 0 17 1 ((om-make-point 278 109) (om-make-point 317 109) (om-make-point 317 202) (om-make-point 285 302)) 0) (19 0 18 0 nil 0) (20 0 18 1 nil 0) (18 0 21 0 nil 0) (22 0 21 1 nil 0) (27 0 24 0 nil 0) (23 0 24 1 nil 0) (26 0 27 0 nil 0) (25 0 27 1 nil 0) (24 0 28 0 nil 0) (8 0 28 1 ((om-make-point 278 109) (om-make-point 211 109) (om-make-point 211 269) (om-make-point 172 304)) 0) (11 0 29 1 nil 0) (10 0 29 2 nil 0) (9 0 29 3 nil 0))) 6.050101 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 112 123) nil nil nil "tutorial_12") (om-load-tempboxout "tempout" (om-make-point 116 216) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 209 27) nil))) (quote ((0 0 1 0 nil 0))) 6.050101 nil "" (om-make-point 200 200) (om-make-point 400 500))) 0 970 1300 (om-make-color 0.36933202 0.38914025 0.38450637) (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (7400) (7400) (5400) (5400) (5400) (5400) (4300) (4300) (4300) (4300) (4300) (4300))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300)) :ldur (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) t 20 54 1 0 (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode player)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0 (quote :midishare))) nil nil nil nil nil nil "") (om-load-tempobj1 "tempobj" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj" (quote ((om-load-boxcall (quote abstraction) "tutorial_08" (om-load-patch-abs1 "tutorial_08" (quote ((om-load-boxout "output" 0 (om-make-point 168 401) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 111 34) (om-make-point 41 27) 3600 "3600" nil) (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "MIDIC" "MIDIC" 6000) (om-load-inputfun (quote input-funbox) "VEL" "VEL" 80) (om-load-inputfun (quote input-funbox) "DUR" "DUR" 1000) (om-load-inputfun (quote input-funbox) "CHAN" "CHAN" 1))) (om-make-point 103 64) (om-make-point 60 61) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 3600 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (obj-mode palette-mode inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos show-stems scale player)) (list 0 0 0 0 (om-make-point 0 -15) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote f) 24 2 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) (quote t) nil (quote :midishare))) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 23 26) (quote "G") "" (om-make-point 240 283) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 26 22) (quote "B") "" (om-make-point 120 164) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 26 24) (quote "A") "" (om-make-point 77 81) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 245 88) (om-make-point 31 26) 1 "1" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 213 89) (om-make-point 21 26) 16 "16" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 176 89) (om-make-point 29 29) 1 "1" nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 180 232) (om-make-point 56 160) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600 4800 5502 6000 6386 6702 6968 7200 7404 7586 7752 7902 8040 8168 8288 8400)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (obj-mode palette-mode deltapict approx fontsize staff cmnpref outport inport zoom notechancolor? grillestep mode winsize winpos show-stems scale player)) (list 0 0 (om-make-point 0 0) 8 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 nil 1000 0 18350450 2621450 (quote t) nil (quote :midishare))) t nil nil nil) (om-load-boxcall (quote abstraction) "harmonic series" (om-load-patch-abs1 "harmonic series" (quote ((om-load-boxcomment "comment" (om-make-point 21 21) (quote "F") "" (om-make-point 168 331) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 21 21) (quote "E") "" (om-make-point 267 166) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 21 21) (quote "D") "" (om-make-point 33 148) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 21 22) (quote "C") "" (om-make-point 18 55) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxout "output" 0 (om-make-point 122 407) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "input3" 3 (om-make-point 267 39) "Step" "Step" 1 nil) (om-load-boxin "input2" 2 (om-make-point 214 39) "Last desired harmonic" "End" 16 nil) (om-load-boxin "input1" 1 (om-make-point 155 39) "Start" "Begin" 1 nil) (om-load-boxin "input" 0 (om-make-point 46 39) "this is the 
fondamental" "fondamental" 3600 nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 192 154) (om-make-point 65 53) nil nil nil 1) (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "freq" "FREQ" 440))) (om-make-point 126 326) (om-make-point 35 39) nil nil nil 1) (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "midic" "MIDICS?" 6000))) (om-make-point 58 126) (om-make-point 35 39) nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 134 259) (om-make-point 24 35) nil nil nil 1))) (quote ((10 0 4 0 nil 0) (7 0 9 0 nil 0) (6 0 9 1 nil 0) (5 0 9 2 nil 0) (12 0 10 0 nil 0) (8 0 11 0 nil 0) (11 0 12 0 nil 0) (9 0 12 1 nil 0))) 6.050101 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "this is the $fondamental" "fondamental" nil) (om-load-inputfun (quote input-funbox) "Start" "Begin" 1) (om-load-inputfun (quote input-funbox) "Last desired harmonic" "End" 16) (om-load-inputfun (quote input-funbox) "Step" "Step" 1))) (om-make-point 150 149) (om-make-point 95 53) nil nil "harmonic series"))) (quote ((9 0 0 0 nil 0) (1 0 2 1 nil 0) (10 0 9 1 nil 0) (2 1 10 0 nil 0) (8 0 10 1 nil 0) (7 0 10 2 nil 0) (6 0 10 3 nil 0))) 6.050101 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 96 123) nil nil nil "tutorial_08") (om-load-tempboxout "tempout" (om-make-point 99 221) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 255 18) nil))) (quote ((0 0 1 0 nil 0))) 6.050101 nil "" (om-make-point 200 200) (om-make-point 400 500))) 0 0 1000 (om-make-color 0.36933202 0.38914025 0.38450637) (list (let ((thechord (make-instance (quote chord) :lmidic (quote (3600 4800 5502 6000 6386 6702 6968 7200 7404 7586 7752 7902 8040 8168 8288 8400)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)) t 20 74 1 0 (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode player)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0 (quote :midishare))) nil nil nil nil nil nil ""))) (quote nil) (quote (0 2432 31 79)) (quote nil) (om-make-color 0.5394719 0.67461175 0.74660635) (quote ((4 60) ((4 4)) 16 t)) (quote nil) nil t "off" 6.050101 nil (quote (1 t)) (quote (1)) nil))

; OM File Header - Saved 2025/03/09 13:31:10
; (6.050101 :patc (om-make-point 102 72) (om-make-point 98 50) (om-make-point 542 583) "No documentation " 183 0 nil "2023/04/09 18:13:49")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "tutorial-02" (quote ((om-load-boxcomment "comment1" (om-make-point 328 43) (quote "TUTORIAL 2 - Inversion of an interval (I)") "" (om-make-point 158 40) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "MIDIC" "MIDIC" 6000) (om-load-inputfun (quote input-funbox) "VEL" "VEL" 80) (om-load-inputfun (quote input-funbox) "DUR" "DUR" 1000) (om-load-inputfun (quote input-funbox) "CHAN" "CHAN" 1))) (om-make-point 276 101) (om-make-point 59 69) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 7100 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (player scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list (quote :midishare) nil (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 -9) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "MIDIC" "MIDIC" 6000) (om-load-inputfun (quote input-funbox) "VEL" "VEL" 80) (om-load-inputfun (quote input-funbox) "DUR" "DUR" 1000) (om-load-inputfun (quote input-funbox) "CHAN" "CHAN" 1))) (om-make-point 199 101) (om-make-point 69 72) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 6000 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (player scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx)) (list (quote :midishare) nil (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 -14) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "CHORD2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 183 413) (om-make-point 113 88) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 4900)) :ldur (quote (1000 1000)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (player scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom cmnpref staff fontsize approx deltapict outport inport)) (list (quote :midishare) nil (quote t) 0 0 (om-make-point 10 40) (om-make-point 500 280) 0 1000 nil 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 (om-make-point 0 -16) 0 0)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 15 23) (quote "F") "" (om-make-point 156 442) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 18 32) (quote "E") "" (om-make-point 153 346) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 27 27) (quote "D") "" (om-make-point 271 263) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 21 29) (quote "C") "" (om-make-point 290 207) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 29 35) (quote "B") "" (om-make-point 350 112) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 15 21) (quote "A") "" (om-make-point 178 129) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil))) (om-make-point 200 329) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 231 266) (om-make-point 24 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 251 205) (om-make-point 24 27) nil nil nil 1))) (quote ((10 0 3 1 nil 0) (2 1 10 0 nil 0) (11 0 10 1 nil 0) (2 1 11 0 nil 0) (12 0 11 1 nil 0) (2 1 12 0 nil 0) (1 1 12 1 nil 0))) nil 6.050101))

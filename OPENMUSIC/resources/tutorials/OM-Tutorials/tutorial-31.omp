; OM File Header - Saved 2025/03/09 13:31:10
; (6.010003 :patc (om-make-point 223 232) (om-make-point 50 50) (om-make-point 614 697) "No documentation " 183 0 nil "2023/04/09 18:13:49")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "tutorial_31" (quote ((om-load-boxcomment "comment1112" (om-make-point 317 37) (quote "TUTORIAL 31 - Working with LISTS (II)") "" (om-make-point 165 15) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF1" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "DECIMALS" "DECIMALS" 0))) (om-make-point 282 76) (om-make-point 114 114) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 8 24 32 49 67 98)) (quote (0 58 58 9 73 73 42)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture inport outport deltapict zoom cmnpref notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list nil 0 0 (om-make-point 0 0) 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 0 0 (quote t))) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 32 33) (quote "I") "" (om-make-point 397 506) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 14 19) (quote "H") "" (om-make-point 286 437) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 40 44) (quote "G") "" (om-make-point 366 377) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 13 18) (quote "F") "" (om-make-point 374 314) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 14 22) (quote "D") "" (om-make-point 405 199) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 13 19) (quote "E") "" (om-make-point 392 239) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 24 27) (quote "C") "" (om-make-point 413 137) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 22 30) (quote "B") "" (om-make-point 273 250) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 17 19) (quote "A") "" (om-make-point 142 95) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100))) (om-make-point 154 485) (om-make-point 226 165) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6600 7600 6800 6100 5500) (4200 3800 3700 3500 4400 5100) (6100 7900 9800 7400) (5700 4700 3800 3600 3200 2500 2300 2400) (2900 4000 8800 9000 10000 9300 8900 8800) (8700 8500 8500 9100 9000 8800))) :lonset (quote (0 1000 2000 3000 4000 5000 6000)) :ldur (quote ((1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1))) :legato 100)))) (load-port-info newobj (quote ((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player inport outport deltapict approx fontsize staff cmnpref zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list (quote :midishare) 0 0 (om-make-point 0 0) 2 28 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 nil 1000 0 18350450 2621450 0 0 (quote t) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 381 196) (om-make-point 19 30) 7 "7" nil) (om-load-boxcall (quote genfun) "BPF-SAMPLE" (quote bpf-sample) (quote ((om-load-inputfun (quote input-funbox) "a BPF" "SELF" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (om-load-inputfun (quote input-funbox) "a number" "XMIN" 10) (om-load-inputfun (quote input-funbox) "a number" "XMAX" 100) (om-load-inputfun (quote input-funbox) "an integer" "NBSAMPLES" 10))) (om-make-point 327 225) (om-make-point 65 53) nil nil nil 1) (om-load-boxcall (quote genfun) "GROUP-LIST" (quote group-list) (quote ((om-load-inputfun (quote input-funbox) " a List" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "a List" "SEGMENTATION" (list 1 3)) (om-load-inputfunmenu1 (quote input-funmenu) "Menu" "MODE" 0 (list (list "linear" (quote (quote linear))) (list "circular" (quote (quote circular))))))) (om-make-point 216 422) (om-make-point 65 53) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 298 356) (om-make-point 61 53) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-SCALE/SUM" (quote om-scale/sum) (quote ((om-load-inputfun (quote input-funbox) "Number or tree" "SELF" (list 1 2 3)) (om-load-inputfun (quote input-funbox) "a number" "SUM" 10))) (om-make-point 290 297) (om-make-point 81 53) nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "ARG-0" "ARG-0" nil))) (om-make-point 234 249) (om-make-point 41 37) nil nil nil 1) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 172 58) (om-make-point 87 160) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6600 7600 6800 6100 5500 4200 3800 3700 3500 4400 5100 6100 7900 9800 7400 5700 4700 3800 3600 3200 2500 2300 2400 2900 4000 8800 9000 10000 9300 8900 8800 8700 8500 8500 9100 9000 8800)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) thechord) "x" nil (pairlis (quote (player inport outport deltapict approx fontsize staff cmnpref zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list (quote :midishare) 0 0 (om-make-point 0 0) 2 60 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 nil 1000 0 18350450 2621450 0 0 (quote t) nil)) t nil nil nil))) (quote ((14 0 11 1 nil 0) (1 0 13 0 nil 0) (12 0 13 3 nil 0) (18 1 14 0 nil 0) (15 0 14 1 nil 0) (16 0 15 0 nil 0) (13 0 16 0 nil 0) (17 0 16 1 nil 0) (18 1 17 0 nil 0))) nil 6.010003))

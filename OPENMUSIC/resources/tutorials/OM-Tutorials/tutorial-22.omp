; OM File Header - Saved 2025/03/09 13:31:10
; (6.050101 :patc (om-make-point 224 181) (om-make-point 426 61) (om-make-point 918 767) "No documentation " 183 0 nil "2023/04/09 22:59:32")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "tutorial-22" (quote ((om-load-boxcomment "comment1112" (om-make-point 255 31) (quote "TUTORIAL 22 - CHORD-SEQ (I)") "" (om-make-point 299 27) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment511" (om-make-point 25 35) (quote "3") "" (om-make-point 229 560) nil (om-make-color 176/255 62/255 6/17) (om-make-font "Helvetica" 24 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment51" (om-make-point 20 35) (quote "2") "" (om-make-point 226 353) nil (om-make-color 176/255 62/255 6/17) (om-make-font "Helvetica" 24 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment5" (om-make-point 20 35) (quote "1") "" (om-make-point 226 188) nil (om-make-color 176/255 62/255 6/17) (om-make-font "Helvetica" 24 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment4" (om-make-point 18 19) (quote "D") "" (om-make-point 585 479) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment3" (om-make-point 18 30) (quote "C") "" (om-make-point 579 310) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment2" (om-make-point 17 19) (quote "B") "" (om-make-point 368 122) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 15 18) (quote "A") "" (om-make-point 562 100) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment11" (om-make-point 485 21) (quote "_________________________________________________________________________________") "" (om-make-point 177 268) nil (om-make-color 33/85 24/85 69/85) (om-make-font "Helvetica" 12 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 501 29) (quote "_________________________________________________________________________________") "" (om-make-point 168 440) nil (om-make-color 33/85 24/85 69/85) (om-make-font "Helvetica" 12 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 547 480) (om-make-point 31 25) 100 "100" nil) (om-load-boxcall (quote bastype) "aux31" (quote t) (quote nil) (om-make-point 248 479) (om-make-point 131 41) (list 6000 6200 6400 6500 6700 6900 7100 7200) "(6000 6200 6400 6500 6700 6900 7100 7200)" nil) (om-load-editor-box1 "CHORD-SEQ1" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 302 550) (om-make-point 285 87) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6200) (6400) (6500) (6700) (6900) (7100) (7200))) :lonset (quote (0 1000 3000 3500 4000 4500 4750 5000 6000)) :ldur (quote ((1000) (2000) (500) (500) (500) (250) (250) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos player)) (list nil (quote t) 0 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 (quote :midishare))) t nil nil nil) (om-load-boxcall (quote bastype) "aux211" (quote t) (quote nil) (om-make-point 391 477) (om-make-point 142 44) (list 0 1000 3000 3500 4000 4500 4750 5000 6000) "(0 1000 3000 3500 4000 4500 4750 5000 6000)" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 264 302) (om-make-point 130 41) (list 6000 6200 6400 6500 6700 6900 7100 7200) "(6000 6200 6400 6500 6700 6900 7100 7200)" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 308 350) (om-make-point 260 87) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6200) (6400) (6500) (6700) (6900) (7100) (7200))) :lonset (quote (0 1000 3000 3500 4000 4500 4750 5000 6000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos player)) (list nil (quote t) 0 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 (quote :midishare))) t nil nil nil) (om-load-boxcall (quote bastype) "aux21" (quote t) (quote nil) (om-make-point 426 304) (om-make-point 145 39) (list 0 1000 3000 3500 4000 4500 4750 5000 6000) "(0 1000 3000 3500 4000 4500 4750 5000 6000)" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 365 86) (om-make-point 25 26) 0 "0" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 222 85) (om-make-point 129 40) (list 6000 6200 6400 6500 6700 6900 7100 7200) "(6000 6200 6400 6500 6700 6900 7100 7200)" nil) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 381 118) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 411 86) (om-make-point 219 28) (list 1000 2000 500 500 500 250 250 1000) "(1000 2000 500 500 500 250 250 1000)" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 292 172) (om-make-point 322 84) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6200) (6400) (6500) (6700) (6900) (7100) (7200))) :lonset (quote (0 1000 3000 3500 4000 4500 4750 5000 6000)) :ldur (quote ((1000) (2000) (500) (500) (500) (250) (250) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos player)) (list nil (quote t) 0 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 (quote :midishare))) t nil nil nil))) (quote ((11 0 12 1 nil 0) (13 0 12 2 nil 0) (10 0 12 7 nil 0) (14 0 15 1 nil 0) (16 0 15 2 nil 0) (17 0 19 0 nil 0) (20 0 19 1 nil 0) (18 0 21 1 nil 0) (19 0 21 2 nil 0) (20 0 21 3 nil 0))) nil 6.050101))

; OM File Header - Saved 2025/03/09 13:31:10
; (6.050101 :patc (om-make-point 341 128) (om-make-point 282 103) (om-make-point 590 578) "No documentation " 183 0 nil "2023/04/09 22:59:31")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "tutorial-15" (quote ((om-load-boxcomment "comment1112" (om-make-point 299 36) (quote "TUTORIAL 15 - Introduction to OMLOOP I") "" (om-make-point 166 17) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux8" (quote t) (quote nil) (om-make-point 512 173) (om-make-point 20 25) 0 "0" nil) (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 431 165) (om-make-point 21 30) 0 "0" nil) (om-load-boxcomment "comment111" (om-make-point 20 20) (quote "D") "" (om-make-point 33 254) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment11" (om-make-point 20 20) (quote "C") "" (om-make-point 205 186) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 20 20) (quote "B") "" (om-make-point 66 117) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 20 20) (quote "A") "" (om-make-point 355 214) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 490 168) (om-make-point 21 28) 2 "2" nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 467 174) (om-make-point 20 25) 1 "1" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 401 164) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 366 165) (om-make-point 28 30) 56 "56" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 105 257) (om-make-point 42 28) (list 0 100) "(0 100)" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 250 258) (om-make-point 36 25) 100 "100" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 42 298) (om-make-point 250 108) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4300) (7300) (6400) (6300) (5700) (4600) (4000) (7800) (4900) (6900) (4100) (5800) (5900) (7000) (4300) (7700) (4900) (7600) (4700) (5000) (5400) (7300) (6100) (5700) (4000) (6200) (4400) (6600) (7200) (4500))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000)) :ldur (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (1) (1) (1) (2) (2) (2) (1) (2) (1) (2) (2) (2) (1) (2) (1) (2) (1) (2) (2) (2) (1) (1) (2) (2) (1) (2) (1) (1) (2))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.050101 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems player)) (list nil 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) 0 0 (quote t) (quote :midishare))) t nil nil nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input0" nil))) (om-make-point 220 175) nil nil nil (list (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 246 323) nil nil nil nil 3) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 293 225) (om-make-point 22 25) 1 "1" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 257 225) (om-make-point 22 24) 2 "2" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 249 151) (om-make-point 40 32) 6000 "6000" nil) (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "SELF" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM" 1))) (om-make-point 168 187) (om-make-point 93 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" nil) (om-load-inputfun (quote input-funbox) "else" "ELSE" nil))) (om-make-point 194 254) (om-make-point 142 53) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 155 107) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 193 48) "no documentation" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 312 406) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 175 403) nil nil nil 0)) (quote ((5 0 0 0 nil 0) (6 0 4 0 nil 0) (3 0 4 1 nil 0) (4 0 5 0 nil 0) (2 0 5 1 nil 0) (1 0 5 2 nil 0) (7 0 6 0 nil 0) (0 1 8 0 nil 0) (0 0 9 0 nil 0))) 1 "omloop" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 97 72) (om-make-point 28 30) 30 "30" nil) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "note generator" (quote ((om-load-boxin "input" 0 (om-make-point 203 126) "no documentation" nil nil nil) (om-load-boxout "output" 0 (om-make-point 107 272) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 131 114) (om-make-point 32 25) 100 "100" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 95 161) (om-make-point 61 35) nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 109 46) (om-make-point 25 27) 80 "80" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 76 46) (om-make-point 21 25) 40 "40" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 0))) (om-make-point 72 79) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 10))) (om-make-point 105 209) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 46 20) (quote "Notes") "" (om-make-point 88 21) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 19 25) (quote "A") "" (om-make-point 75 21) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (quote ((7 0 1 0 nil 0) (6 0 3 0 nil 0) (2 0 3 1 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (3 0 7 0 nil 0) (0 0 7 1 nil 0))) 6.050101 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 63 104) nil (list (list 4300 7300 6400 6300 5700 4600 4000 7800 4900 6900 4100 5800 5900 7000 4300 7700 4900 7600 4700 5000 5400 7300 6100 5700 4000 6200 4400 6600 7200 4500)) "&" "note generator") (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil))) (om-make-point 425 276) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PGMOUT1" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 2) (om-load-inputfun (quote input-funbox) "optional port" "PORT" nil))) (om-make-point 476 201) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 56) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" nil))) (om-make-point 386 201) nil nil nil nil 1))) (quote ((16 0 13 1 nil 0) (11 0 13 2 nil 0) (14 0 13 6 nil 0) (12 0 13 7 nil 0) (16 0 14 0 nil 0) (15 0 16 0 nil 0) (19 0 17 0 nil 0) (18 0 17 1 nil 0) (8 0 18 0 nil 0) (7 0 18 1 nil 0) (1 0 18 2 nil 0) (10 0 19 0 nil 0) (9 0 19 1 nil 0) (2 0 19 2 nil 0))) nil 6.050101))

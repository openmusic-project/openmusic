; OM File Header - Saved 2025/03/09 13:31:10
; (6.050101 :patc (om-make-point 525 180) (om-make-point 93 0) (om-make-point 763 856) "No documentation " 183 0 nil "2023/04/09 18:13:49")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "tutorial-27" (quote ((om-load-boxcomment "comment1112" (om-make-point 453 33) (quote "TUTORIAL 27 - Introduction to rhythm quantification") "" (om-make-point 219 10) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux8" (quote t) (quote nil) (om-make-point 594 87) (om-make-point 24 25) 0 "0" nil) (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 535 205) (om-make-point 30 26) 8 "8" nil) (om-load-boxcomment "comment" (om-make-point 15 19) (quote "F") "" (om-make-point 205 775) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 16 19) (quote "E") "" (om-make-point 213 645) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 15 18) (quote "A") "" (om-make-point 217 154) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 17 19) (quote "B") "" (om-make-point 377 189) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 14 23) (quote "C") "" (om-make-point 344 250) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 18 19) (quote "D") "" (om-make-point 209 358) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 566 87) (om-make-point 15 23) 1 "1" nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 527 88) (om-make-point 21 24) 74 "74" nil) (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 2) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" nil))) (om-make-point 526 117) (om-make-point 90 53) nil nil nil 1) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 514 595) (om-make-point 23 25) 1.0 "1.0" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 424 595) (om-make-point 46 29) (list 5 6 7) "(5 6 7)" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 223 458) (om-make-point 251 103) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5300) (4700) (4200) (6400) (6300) (5000) (7300) (6800) (7700) (6500) (6400) (7400) (7700) (8000) (5400) (6900) (4200) (7700) (5700) (5300) (7600) (5600) (6800) (6200) (4500) (8200) (7300) (7200) (5600) (6700))) :lonset (quote (0 420 810 1010 1400 1710 1910 2150 2560 2740 2960 3340 3560 3760 4100 4450 4580 4930 5430 5810 6240 6450 6610 6950 7340 7510 7990 8130 8430 8890 9200)) :ldur (quote ((420) (390) (200) (390) (310) (200) (240) (410) (180) (220) (380) (220) (200) (340) (350) (130) (350) (500) (380) (430) (210) (160) (340) (390) (170) (480) (140) (300) (460) (310))) :lvel (quote ((93) (88) (113) (80) (48) (36) (66) (68) (113) (119) (78) (29) (61) (66) (51) (118) (35) (38) (55) (120) (54) (52) (66) (15) (99) (35) (64) (103) (33) (33))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems player)) (list nil 0 0 (om-make-point 0 1) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 1 nil 1000 0 18350450 2621450 0 0 (quote t) (quote :midishare))) t nil nil nil) (om-load-boxcall (quote genfun) "OMQUANTIFY" (quote omquantify) (quote ((om-load-inputfun (quote input-funbox) "durations" "DURS" (list 100)) (om-load-inputfun (quote input-funbox) "Tempo" "TEMPI" 60) (om-load-inputfun (quote input-funbox) "measures" "MEASURES" (list 4 4)) (om-load-inputfun (quote input-funbox) "maximum division" "MAX/" 8) (om-load-inputfun (quote input-funbox) "forbidden$divisions" "FORBID" nil) (om-load-inputfun (quote input-funbox) "grace-notes?" "OFFSET" 0) (om-load-inputfun (quote input-funbox) "precission" "PRECIS" 0.5))) (om-make-point 237 632) (om-make-point 328 53) nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 291 598) (om-make-point 25 27) 60 "60" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 338 598) (om-make-point 36 26) (list 4 8) "(4 8)" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 392 595) (om-make-point 17 27) 8 "8" nil) (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 -2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))) (om-load-inputfun (quote input-funbox) "CHORDS" "CHORDS" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "TEMPO" "TEMPO" 60) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100) (om-load-inputfun (quote input-funbox) "TIES" "TIES" nil))) (om-make-point 231 710) (om-make-point 327 112) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (19/8 (((4 8) ((1 (3 1)) (1 (2.0 1)) (1 (2 1)) (1 (2.0 1 1)))) ((4 8) ((1 (1.0 2)) (1 (1 2)) (1 (2 1)) (1 (1 1)))) ((4 8) ((1 (1.0 3)) (1 (1 2 1)) (1 (3.0 1)) (1 (2.0 1)))) ((4 8) ((1 (1.0 1)) (1 (1 3)) (1 (2 1)) 1)) ((3 8) ((1 (1 2 1)) (1 (3.0 1)) (1 (1.0 -2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (375)) :lvel (quote (93)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (125)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (167)) :lvel (quote (113)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (167)) :lvel (quote (48)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (125)) :lvel (quote (36)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (333)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (167)) :lvel (quote (113)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (333)) :lvel (quote (119)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (78)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (167)) :lvel (quote (29)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (250)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (250)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (375)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (118)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (250)) :lvel (quote (35)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (125)) :lvel (quote (38)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (125)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (167)) :lvel (quote (120)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (250)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (125)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (375)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (15)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (99)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (35)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (125)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (103)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (125)) :lvel (quote (33)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (125)) :lvel (quote (33)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems player)) (list nil -1 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 1 nil 1000 0 18350450 2621450 0 0 (quote t) (quote :midishare))) t nil nil nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 256 575) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 401 175) nil nil nil nil 1) (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 -2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))) (om-load-inputfun (quote input-funbox) "CHORDS" "CHORDS" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "TEMPO" "TEMPO" 60) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100) (om-load-inputfun (quote input-funbox) "TIES" "TIES" nil))) (om-make-point 238 314) (om-make-point 297 106) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (11/4 (((4 4) ((1 (2 2 1)) (1 (2 2 1 1)) (1 (1.0 2 1 1)) (1 (2 1 1 1)))) ((4 4) ((1 (1.0 2 1 3)) (1 (2 2 1)) (1 (1.0 1 1 2)) (1 (2 1 3)))) ((3 4) ((1 (1 2 3 1)) (1 (1.0 -4)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (400)) :lvel (quote (93)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (400)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (200)) :lvel (quote (113)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (333)) :lvel (quote (48)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (167)) :lvel (quote (36)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (167)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (400)) :lvel (quote (68)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (200)) :lvel (quote (113)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (200)) :lvel (quote (119)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (400)) :lvel (quote (78)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (200)) :lvel (quote (29)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (200)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (200)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (286)) :lvel (quote (51)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (143)) :lvel (quote (118)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200)) :ldur (quote (429)) :lvel (quote (35)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (400)) :lvel (quote (38)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (400)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (200)) :lvel (quote (120)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (200)) :lvel (quote (54)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (200)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (400)) :lvel (quote (66)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (15)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (167)) :lvel (quote (99)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (35)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (143)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (286)) :lvel (quote (103)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (429)) :lvel (quote (33)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (143)) :lvel (quote (33)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems player)) (list nil -1 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 1 nil 1000 0 18350450 2621450 0 0 (quote t) (quote :midishare))) t nil nil nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 482 207) (om-make-point 34 23) (list 4 4) "(4 4)" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 449 206) (om-make-point 26 25) 60 "60" nil) (om-load-boxcall (quote genfun) "OMQUANTIFY" (quote omquantify) (quote ((om-load-inputfun (quote input-funbox) "durations" "DURS" (list 100)) (om-load-inputfun (quote input-funbox) "Tempo" "TEMPI" 60) (om-load-inputfun (quote input-funbox) "measures" "MEASURES" (list 4 4)) (om-load-inputfun (quote input-funbox) "maximum division" "MAX/" 8))) (om-make-point 371 234) (om-make-point 208 53) nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 219 56) (om-make-point 253 104) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5300) (4700) (4200) (6400) (6300) (5000) (7300) (6800) (7700) (6500) (6400) (7400) (7700) (8000) (5400) (6900) (4200) (7700) (5700) (5300) (7600) (5600) (6800) (6200) (4500) (8200) (7300) (7200) (5600) (6700))) :lonset (quote (0 420 810 1010 1400 1710 1910 2150 2560 2740 2960 3340 3560 3760 4100 4450 4580 4930 5430 5810 6240 6450 6610 6950 7340 7510 7990 8130 8430 8890 9200)) :ldur (quote ((420) (390) (200) (390) (310) (200) (240) (410) (180) (220) (380) (220) (200) (340) (350) (130) (350) (500) (380) (430) (210) (160) (340) (390) (170) (480) (140) (300) (460) (310))) :lvel (quote ((93) (88) (113) (80) (48) (36) (66) (68) (113) (119) (78) (29) (61) (66) (51) (118) (35) (38) (55) (120) (54) (52) (66) (15) (99) (35) (64) (103) (33) (33))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems player)) (list nil 0 0 (om-make-point 0 1) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 1 nil 1000 0 18350450 2621450 0 0 (quote t) (quote :midishare))) t nil nil nil))) (quote ((10 0 11 0 nil 0) (9 0 11 1 nil 0) (1 0 11 2 nil 0) (20 0 15 0 nil 0) (16 0 15 1 nil 0) (17 0 15 2 nil 0) (18 0 15 3 nil 0) (13 0 15 4 nil 0) (12 0 15 6 nil 0) (15 0 19 1 nil 0) (14 0 19 2 nil 0) (14 3 20 0 nil 0) (26 3 21 0 nil 0) (25 0 22 1 nil 0) (26 0 22 2 nil 0) (21 0 25 0 nil 0) (24 0 25 1 nil 0) (23 0 25 2 nil 0) (2 0 25 3 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name nil :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict nil :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs (list (list (quote line) (list 4/185 7/16 359/370 17/40) (list (om-make-color 0.5701357 0.3409489 0.2730887) 8 (quote line) nil) nil))))) (setf (pict-pos newpict) (om-make-point 254 439)) (setf (pict-size newpict) (om-make-point 397 5)) newpict)) 6.050101))

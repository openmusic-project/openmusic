; OM File Header - Saved 2025/03/09 13:31:10
; (6.010003 :patc (om-make-point 36 233) (om-make-point 608 440) (om-make-point 820 675) "No documentation " 183 0 nil "2023/04/09 18:13:49")
; End File Header
; External resources 
; (list (list (quote :midi) "../../in-files/INV4.MID"))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "tutorial_28" (quote ((om-load-boxcomment "comment1112" (om-make-point 317 37) (quote "TUTORIAL 28 - Working with MIDI Files (I)") "" (om-make-point 222 19) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "all voices" (quote ((om-load-boxcall (quote genfun) "SAVE-AS-MIDI" (quote save-as-midi) (quote ((om-load-inputfun (quote input-funbox) "a music object to save" "OBJECT" nil))) (om-make-point 176 390) nil nil nil nil 1) (om-load-editor-box1 "midifile" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 246 25) (om-make-point 50 72) (let ((newobj (load-midi (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "INV4" :type "MID")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx player)) (list nil (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 1 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midishare))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 317 77) (om-make-point 29 28) 200 "200" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 288 122) nil nil nil (list (om-load-boxin "input1" 1 (om-make-point 121 23) "no documentation" nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 433 100) (om-make-point 21 26) 1 "1" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 1))) (om-make-point 397 130) (om-make-point 60 27) nil nil nil 1) (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low val" "FROM" 0) (om-load-inputfun (quote input-funbox) "high val" "TO" 10))) (om-make-point 307 171) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH1" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 341 119) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "TRACKS" (quote tracks) (quote ((om-load-inputfun (quote input-funbox) "INTERNALMIDIFILE" "INTERNALMIDIFILE" nil))) (om-make-point 341 78) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 129 458) nil nil nil nil 3) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 129 401) (om-make-point 215 52) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport player)) (list nil (quote t) 0 0 2621450 18350450 0 1000 nil 1 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 (quote :midishare))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 106 288) (om-make-point 33 32) 100 "100" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 105 359) (om-make-point 55 35) nil nil nil 1) (om-load-boxcall (quote lispfun) "FIFTH" (quote fifth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 328 264) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 279 264) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 207 264) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 154 264) nil nil nil "second" 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 70 264) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "the list" "MATRIX" nil))) (om-make-point 193 197) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MF-INFO" (quote mf-info) (quote ((om-load-inputfun (quote input-funbox) "a Midifile object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track number or nil" "TRACKNUM" nil))) (om-make-point 200 135) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 76 319) (om-make-point 36 35) nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 197 19) "no documentation" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 172 529) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 93 527) nil nil nil 0)) (quote ((4 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 1 nil 0) (5 0 4 0 nil 0) (18 0 5 0 nil 0) (7 0 6 0 nil 0) (9 0 7 1 nil 0) (13 0 7 2 nil 0) (12 0 7 3 nil 0) (11 0 7 4 nil 0) (10 0 7 6 nil 0) (17 0 9 0 nil 0) (0 0 9 1 nil 0) (15 0 10 0 nil 0) (15 0 11 0 nil 0) (15 0 12 0 nil 0) (15 0 13 0 nil 0) (15 0 14 0 nil 0) (16 0 15 0 nil 0) (18 0 16 0 nil 0) (3 0 16 1 nil 0) (14 0 17 0 nil 0) (8 0 17 1 nil 0) (6 1 19 0 nil 0) (6 0 20 0 nil 0))) 1 "omloop" nil) (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "CHORD-SEQS" "CHORD-SEQS" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 122 190) (om-make-point 297 150) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (6400) (6600) (6700) (6400) (6600) (6200) (6900) (7400) (7300) (7100) (7300) (7400) (7600) (6900) (7100) (7300) (7400) (7100) (7300) (6900) (7600) (8100) (7900) (7800) (7900) (8100) (7800) (8300) (8100) (7900) (7800) (8100) (7900) (8300) (8100) (7900) (7800) (7600) (7400) (7800) (7600) (7900) (7800) (7600) (7400) (7300) (7100) (7400) (7300) (7600) (7400) (7300) (7100) (6900) (6800) (7100) (6900) (7300) (7100) (6400) (7400) (7300) (7400) (7600) (7300) (7100) (6900) (6800) (6600) (6900) (6800) (7100) (6900) (7300) (7100) (7400) (7300) (7600) (7400) (7800) (7600) (7300) (7400) (7600) (8100) (7300) (7400) (7300) (7100) (6900) (6900) (6900) (7100) (7300) (7400) (7100) (7300) (6900) (6800) (7100) (7300) (7400) (7600) (7300) (7400) (7100) (7300) (7600) (7400) (7300) (7100) (7400) (7300) (7600) (7400) (7800) (7600) (7400) (7300) (7600) (7500) (7800) (7600) (7500) (7600) (7800) (7900) (7100) (7300) (7500) (7600) (6800) (7000) (7100) (7300) (7400) (7600) (6600) (6800) (7000) (7100) (6800) (7000) (6600) (7800) (7600) (7400) (7800) (7600) (7400) (7300) (7600) (7400) (8300) (8200) (8500) (8300) (7800) (7900) (7600) (7000) (7900) (7800) (7600) (7400) (7600) (7400) (7300) (7100) (7100) (8300) (8100) (7900) (7800) (8100) (7900) (8300) (8100) (7800) (7900) (8100) (8300) (7900) (8100) (7800) (7900) (8100) (7900) (7800) (7600) (7900) (7800) (8100) (7900) (7600) (7800) (7900) (8100) (7800) (7900) (7600) (7800) (7400) (7600) (7800) (7900) (7600) (7800) (7400) (7600) (7800) (7900) (8100) (8300) (7900) (8100) (7800) (7900) (8100) (8300) (8500) (8600) (8300) (8500) (8100) (8600) (8100) (7800) (7900) (7800) (7600) (7400) (7400) (7200) (7100) (6900) (6700) (7100) (6900) (7200) (7100) (7300) (7400) (6600) (6400) (7400) (6700) (7300) (7400) (6900) (6600))) :lonset (quote (250 500 750 1000 1250 1500 1750 2000 2500 3000 3125 3250 3500 4000 4250 4500 4750 5000 5250 5500 5750 6000 6500 7000 7125 7250 7500 8000 8250 8500 8750 9000 9250 9500 9750 10000 10250 10500 10750 11000 11250 11500 11750 12000 12250 12500 12750 13000 13250 13500 13750 14000 14250 14500 14750 15000 15250 15500 15750 16000 16500 17000 17125 17250 17750 18000 18250 18500 18750 19000 19250 19500 19750 20000 20250 20500 20750 21000 21250 21500 21750 22000 22250 22375 22500 22750 23000 23083 23167 23500 23750 24000 26250 26500 26750 27000 27250 27500 27750 28000 30250 30500 30750 31000 31250 31500 31750 32000 34250 34500 34750 35000 35250 35500 35750 36000 38250 38500 38750 39000 39250 39500 39750 40000 40500 41000 41500 42000 42500 43000 43500 44000 44500 45000 45500 46000 46500 47000 48250 48500 48750 49000 49250 49500 49750 50000 50250 50500 50750 51000 51250 51500 51750 52000 52250 52500 52750 53000 53250 53500 53750 54000 54250 54500 54750 55000 55083 55167 55500 55750 56000 56250 56500 56750 57000 57250 57500 57750 58000 60250 60500 60750 61000 61250 61500 61750 62000 64250 64500 64750 65000 65250 65500 65750 66000 68250 68500 68750 69000 69250 69500 69750 70000 72250 72500 72750 73000 73250 73500 73750 74000 74250 74500 74750 75000 75250 75500 75750 76000 76250 76500 76750 77000 77250 77500 77750 78000 78500 79000 79083 79167 79500 79750 80000 80250 80500 80750 81000 81250 81500 81750 82000 82250 82500 82750 83000 83250 83500 83750 84000 84000 84000 84000)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5000) (5200) (5400) (5500) (5200) (5400) (5000) (5700) (4500) (5700) (5900) (6100) (6200) (5900) (6100) (5700) (6200) (6100) (6200) (6400) (6600) (5700) (5900) (6100) (6200) (5400) (5600) (5700) (5900) (6100) (6200) (5200) (5400) (5600) (5700) (5400) (5600) (5200) (5700) (4900) (5000) (5200) (5400) (5600) (5700) (5400) (4900) (5000) (5200) (4000) (4500) (4700) (4900) (5000) (4700) (4900) (4500) (5200) (5700) (5600) (5700) (5900) (5200) (5400) (5600) (5700) (5400) (5600) (5200) (5900) (6400) (6200) (6400) (5700) (6900) (6700) (6600) (6400) (6700) (6600) (6900) (6700) (6600) (6700) (6400) (6600) (7100) (6900) (6700) (6600) (6900) (6700) (7100) (6900) (6700) (6900) (6600) (6700) (7200) (7100) (6900) (6700) (7100) (6900) (7200) (7100) (6900) (6700) (6600) (6400) (6700) (6600) (6900) (6700) (6600) (6400) (6200) (6100) (6400) (6200) (6600) (6400) (6200) (6100) (5900) (5800) (6100) (5900) (6200) (6100) (5400) (6400) (6200) (6400) (6600) (6200) (6100) (5900) (5700) (5600) (5900) (5800) (6100) (5900) (6200) (6100) (6400) (6200) (6600) (6400) (6700) (6600) (5900) (6600) (5400) (5500) (4700) (6600) (6400) (6200) (6100) (6400) (6300) (6600) (6400) (5900) (6100) (6200) (6400) (6100) (6200) (5900) (6100) (6400) (6200) (6100) (5900) (6200) (6100) (6400) (6200) (5700) (5900) (6000) (6200) (5900) (6000) (5700) (5900) (6000) (5900) (5700) (5500) (6400) (6200) (6000) (5900) (6700) (6600) (6400) (6600) (5200) (5400) (5500) (5700) (5400) (5500) (5200) (5400) (5000) (5200) (5400) (5500) (5200) (5400) (5500) (5700) (4500) (5000) (3800))) :lonset (quote (2250 2500 2750 3000 3250 3500 3750 4000 4500 6250 6500 6750 7000 7250 7500 7750 8000 8500 9000 9500 10000 10500 11000 11500 12000 12500 13000 13500 14000 14500 15000 16250 16500 16750 17000 17250 17500 17750 18000 18500 19000 19500 20000 20500 21000 21500 22000 22500 23000 23500 24250 24500 24750 25000 25250 25500 25750 26000 26500 27000 27500 28000 28250 28500 28750 29000 29250 29500 29750 30000 30500 31000 31500 32000 32250 32500 32750 33000 33250 33500 33750 34000 34500 35000 35500 36000 36250 36500 36750 37000 37250 37500 37750 38000 38500 39000 39500 40000 40250 40500 40750 41000 41250 41500 41750 42000 42250 42500 42750 43000 43250 43500 43750 44000 44250 44500 44750 45000 45250 45500 45750 46000 46250 46500 46750 47000 47250 47500 47750 48000 48500 49000 49125 49250 49750 50000 50250 50500 50750 51000 51250 51500 51750 52000 52250 52500 52750 53000 53250 53500 53750 54000 54500 55000 55500 56000 56500 58250 58500 58750 59000 59250 59500 59750 60000 62250 62500 62750 63000 63250 63500 63750 64000 66250 66500 66750 67000 67250 67500 67750 68000 70250 70500 70750 71000 71250 71500 71750 72000 72500 73000 73500 74000 74500 75000 75500 76000 76500 77000 77500 78000 78250 78500 78750 79000 79250 79500 79750 80000 80500 81000 81500 82000 82250 82500 82750 83000 83500 84000 84000 84000)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250) (500) (500) (250) (250) (250) (250) (250) (250) (250) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (1250) (250) (250) (250) (250) (250) (250) (250) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (250) (250) (250) (250) (250) (250) (250) (500) (500) (500) (500) (250) (250) (250) (250) (250) (250) (250) (250) (500) (500) (500) (500) (250) (250) (250) (250) (250) (250) (250) (250) (500) (500) (500) (500) (250) (250) (250) (250) (250) (250) (250) (250) (500) (500) (500) (500) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (500) (500) (125) (125) (500) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (500) (500) (500) (500) (500) (500) (250) (250) (250) (250) (250) (250) (250) (2250) (250) (250) (250) (250) (250) (250) (250) (2250) (250) (250) (250) (250) (250) (250) (250) (2250) (250) (250) (250) (250) (250) (250) (250) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (250) (250) (250) (250) (250) (250) (250) (250) (500) (500) (500) (500) (250) (250) (250) (250) (500) (500) (6000) (6000))) :lvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport player)) (list nil (quote t) 0 0 2621450 18350450 0 1000 nil 1 2 24 (list (quote g) (quote f)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 (quote :midishare))) t nil nil nil))) (quote ((4 0 0 0 nil 0) (1 0 3 0 nil 0) (2 0 3 1 nil 0) (3 0 4 1 nil 0))) 6.010003 nil "") (quote nil) (om-make-point 347 82) nil nil nil "all voices") (om-load-boxcomment "comment" (om-make-point 18 26) (quote "H") "" (om-make-point 363 67) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 18 26) (quote "G") "" (om-make-point 46 538) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 18 26) (quote "F") "" (om-make-point 45 472) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 18 26) (quote "E") "" (om-make-point 27 431) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 105 392) (om-make-point 35 30) 100 "100" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 67 421) (om-make-point 46 35) nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 127 427) (om-make-point 35 30) 200 "200" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 95 457) (om-make-point 55 35) nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 87 504) (om-make-point 399 107) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (6600) (6700) (6900) (7100) (7200) (6300) (7200) (7100) (6900) (6700) (6600) (6700) (7100) (7600) (6900) (7200) (7800) (7600) (7800) (7900) (8100) (8300) (8400) (7500) (8400) (8300) (8100) (7900) (7800) (7900) (7600) (7800) (7900) (8100) (8300) (7200) (8300) (8100) (7900) (7800) (7600) (7800) (7400) (7600) (7800) (7900) (8100) (7100) (8100) (7900) (7800) (7600) (7400) (7600) (7800) (7900) (7600) (7800) (7900) (6900) (7400) (7600) (7800) (7400) (7600) (7800) (6700) (7200) (7100) (6900) (7400) (7200) (7100) (6900) (6700) (6600) (6700) (6900) (6900) (7100) (6900) (6700) (6700) (7400) (7400) (7400) (7600) (7400) (7600) (7400) (7600) (7400) (7600) (7400) (7600) (7400) (7600) (7400) (7600) (7400) (7600) (7400) (7600) (7400) (7600) (7400) (7600) (7400) (7600) (7400) (7600) (7400) (7600) (7400) (7600) (7400) (7600) (7400) (7600) (7400) (7600) (7400) (7200) (7100) (6900) (6700) (6600) (7400) (6400) (6600) (6800) (6900) (7100) (7200) (7100) (6900) (6700) (6600) (6400) (7200) (6200) (6400) (6600) (6700) (6900) (7100) (7300) (7400) (7600) (7800) (7900) (7000) (7900) (7800) (7600) (7400) (7300) (7400) (7300) (7600) (7400) (7300) (7100) (7000) (7100) (7000) (6800) (6600) (6400) (6200) (6400) (6600) (6800) (7000) (7100) (6400) (7400) (7300) (7100) (7000) (6800) (6600) (6800) (7000) (7100) (7300) (7400) (6800) (7800) (7600) (7400) (7300) (7100) (7000) (7100) (7300) (7400) (7600) (7800) (7100) (7900) (7800) (7600) (7400) (7300) (8300) (8200) (8000) (7800) (8300) (7600) (7300) (7400) (7300) (7100) (7100) (7100) (7200) (7400) (6400) (6800) (7100) (7200) (6900) (7100) (7200) (7400) (7600) (6600) (7600) (7400) (7200) (7100) (6900) (7100) (7900) (7800) (7900) (6900) (7800) (7600) (7800) (7900) (8100) (8300) (8400) (7500) (8400) (8300) (8100) (7900) (7800) (7900) (7600) (6900) (7600) (7500) (7800) (7100) (7500) (7600) (7300) (7500) (7600) (7600) (7400) (7200) (7100) (6900) (6700) (7200) (6300) (6400) (6600) (6700) (6900) (7100) (7600) (6700) (6600) (6400) (6400))) :lonset (quote (0 152 303 455 606 758 909 1061 1212 1364 1515 1667 1818 2121 2424 2727 3030 3333 3636 3788 3939 4091 4242 4394 4545 4697 4848 5000 5152 5303 5455 5606 5758 5909 6061 6212 6364 6515 6667 6818 6970 7121 7273 7424 7576 7727 7879 8030 8182 8333 8485 8636 8788 8939 9091 9242 9394 9545 9697 9848 10000 10909 11061 11212 11364 11515 11667 11818 12424 13030 13333 13636 13788 13939 14091 14242 14394 14545 14697 14848 14924 15000 15303 15455 15758 16061 16364 16439 16515 16591 16667 16742 16818 16894 16970 17045 17121 17197 17273 17348 17424 17500 17576 17652 17727 17803 17879 17955 18030 18106 18182 18258 18333 18409 18485 18561 18636 18712 18788 18864 18939 19015 19091 19242 19394 19545 19697 19848 20000 20152 20303 20455 20606 20758 20909 21061 21212 21364 21515 21667 21818 21970 22121 22273 22424 22576 22727 22879 23030 23182 23333 23485 23636 23788 23939 24091 24242 24394 24545 24697 24849 25000 25152 25303 25455 25606 25758 25909 26061 26212 26364 26515 26667 26818 26970 27121 27273 27424 27576 27727 27879 28030 28182 28333 28485 28636 28788 28939 29091 29242 29394 29545 29697 29849 30000 30152 30303 30455 30606 30758 30909 31061 31212 31364 31515 31667 31818 31970 32121 32273 32424 32879 33030 33106 33182 33485 33636 34091 34242 34394 34545 34849 35152 35455 35606 35758 35909 36061 36212 36364 36515 36667 36818 36970 37121 37273 37576 37727 37879 38182 38485 39091 39242 39394 39545 39697 39849 40000 40152 40303 40455 40606 40758 40909 41212 41515 41970 42121 42273 42424 42576 42727 42879 43030 43485 43636 43788 43939 44091 44242 44394 44545 44697 44849 45000 45152 45303 45455 45606 45758 46061 46212 46364 46516)) :ldur (quote ((152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (303) (303) (303) (303) (303) (303) (152) (151) (152) (151) (152) (151) (152) (151) (152) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (303) (152) (151) (152) (151) (152) (151) (303) (606) (303) (303) (152) (151) (152) (151) (152) (151) (152) (151) (76) (76) (303) (152) (303) (303) (303) (75) (84) (83) (83) (83) (84) (84) (83) (83) (84) (84) (83) (83) (84) (84) (83) (83) (83) (84) (83) (83) (83) (84) (83) (83) (83) (84) (83) (83) (83) (84) (83) (83) (83) (84) (83) (151) (152) (151) (152) (151) (152) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (455) (151) (76) (76) (303) (151) (455) (151) (152) (151) (304) (303) (303) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (303) (151) (152) (303) (303) (303) (151) (152) (151) (152) (152) (151) (152) (151) (152) (151) (152) (151) (303) (303) (455) (151) (152) (151) (152) (151) (152) (151) (455) (151) (152) (151) (152) (151) (152) (151) (152) (152) (151) (152) (151) (152) (151) (152) (303) (151) (152) (1818))) :lvel (quote ((64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (48) (48) (48) (49) (49) (49) (50) (50) (51) (51) (51) (52) (52) (52) (53) (53) (53) (54) (54) (54) (55) (55) (55) (56) (56) (57) (57) (57) (58) (58) (58) (59) (59) (59) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport player)) (list nil (quote t) 0 0 2621450 18350450 0 1000 nil 1 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 (quote :midishare))) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 18 26) (quote "D") "" (om-make-point 26 381) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 18 26) (quote "C") "" (om-make-point 195 233) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 18 26) (quote "B") "" (om-make-point 355 218) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 18 26) (quote "A") "" (om-make-point 191 169) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment121" (om-make-point 52 19) (quote "Channels") "" (om-make-point 371 305) nil (om-make-color 1/15 22/255 52/85) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment12" (om-make-point 63 21) (quote "Velocities") "" (om-make-point 286 305) nil (om-make-color 1/15 22/255 52/85) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment11" (om-make-point 57 19) (quote "Durations") "" (om-make-point 218 305) nil (om-make-color 1/15 22/255 52/85) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 40 19) (quote "Onsets") "" (om-make-point 152 306) nil (om-make-color 1/15 22/255 52/85) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 77 20) (quote "MIDI notes") "" (om-make-point 78 306) nil (om-make-color 1/15 22/255 52/85) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "FIFTH" (quote fifth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 385 365) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 293 365) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 225 365) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 151 365) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 62 364) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 313 216) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 257 131) (om-make-point 20 20) 0 "0" nil) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "the list" "MATRIX" nil))) (om-make-point 215 228) nil nil nil nil 1) (om-load-editor-box1 "midifile" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 214 58) (om-make-point 50 72) (let ((newobj (load-midi (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "INV4" :type "MID")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx player)) (list nil (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midishare))) t nil nil nil) (om-load-boxcall (quote genfun) "MF-INFO" (quote mf-info) (quote ((om-load-inputfun (quote input-funbox) "a Midifile object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track number or nil" "TRACKNUM" nil))) (om-make-point 221 155) nil nil nil nil 1))) (quote ((24 0 7 0 nil 0) (6 0 7 1 nil 0) (7 0 9 0 nil 0) (8 0 9 1 nil 0) (9 0 10 1 nil 0) (23 0 10 2 nil 0) (22 0 10 3 nil 0) (21 0 10 4 nil 0) (20 0 10 6 nil 0) (27 0 20 0 nil 0) (27 0 21 0 nil 0) (27 0 22 0 nil 0) (27 0 23 0 nil 0) (27 0 24 0 nil 0) (29 0 25 0 nil 0) (29 0 27 0 nil 0) (28 0 29 0 nil 0) (26 0 29 1 nil 0))) nil 6.010003))

; OM File Header - Saved 2025/03/09 13:31:10
; (6.010003 :patc (om-make-point 466 231) (om-make-point 165 176) (om-make-point 866 659) "No documentation " 183 0 nil "2023/04/09 22:59:31")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "tutorial_35" (quote ((om-load-boxcomment "comment1112" (om-make-point 317 37) (quote "TUTORIAL 35 - Lambda Functions (II)") "" (om-make-point 286 22) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 15 20) (quote "H") "" (om-make-point 234 506) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 22 31) (quote "G") "" (om-make-point 464 214) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 15 18) (quote "A") "" (om-make-point 134 301) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 17 19) (quote "B") "" (om-make-point 168 180) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 19 30) (quote "C") "" (om-make-point 122 257) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 18 19) (quote "D") "" (om-make-point 255 207) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 16 19) (quote "E") "" (om-make-point 385 245) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 26 34) (quote "F") "" (om-make-point 318 112) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 244 233) nil nil "l" (list (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 112 323) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 70 258) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 72 116) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "tutorial_14" (om-load-patch-abs1 "tutorial_14" (quote ((om-load-boxout "output" 0 (om-make-point 200 388) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 159 42) "no documentation" nil nil nil) (om-load-boxcomment "comment11111" (om-make-point 19 25) (quote "F") "" (om-make-point 151 386) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1111" (om-make-point 19 25) (quote "E") "" (om-make-point 173 327) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment111" (om-make-point 19 25) (quote "D") "" (om-make-point 247 3) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment11" (om-make-point 19 25) (quote "C") "" (om-make-point 99 253) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 19 25) (quote "B") "" (om-make-point 74 193) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 254 266) (om-make-point 37 26) 20 "20" nil) (om-load-boxcomment "comment" (om-make-point 19 25) (quote "A") "" (om-make-point 69 43) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 94 27) (quote "Random Notes") "" (om-make-point 220 21) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 0))) (om-make-point 221 81) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 225 48) (om-make-point 26 26) 42 "42" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 258 48) (om-make-point 35 25) 82 "82" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 244 163) (om-make-point 61 35) nil nil nil 1) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 292 115) (om-make-point 43 29) 100 "100" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 0))) (om-make-point 194 318) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 93 76) (om-make-point 24 27) 1 "1" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 61 76) (om-make-point 20 26) 0 "0" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 116 160) (om-make-point 16 26) 0 "0" nil) (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "SELF" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM" 0))) (om-make-point 100 190) (om-make-point 31 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 57 106) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" nil) (om-load-inputfun (quote input-funbox) "else" "ELSE" nil))) (om-make-point 129 242) (om-make-point 91 53) nil nil nil 1))) (quote ((15 0 0 0 nil 0) (11 0 10 0 nil 0) (12 0 10 1 nil 0) (10 0 13 0 nil 0) (14 0 13 1 nil 0) (21 0 15 0 nil 0) (7 0 15 1 nil 0) (20 0 19 0 nil 0) (18 0 19 1 nil 0) (17 0 20 0 nil 0) (16 0 20 1 nil 0) (19 0 21 0 nil 0) (1 0 21 1 nil 0) (13 0 21 2 nil 0))) 6.010003 nil "") (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 60 181) nil nil nil "tutorial_14") (om-load-boxin "input0" 0 (om-make-point 76 49) "no documentation" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 125 391) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 19 345) nil nil nil 0)) (quote ((1 1 0 0 nil 0) (3 0 1 0 nil 0) (4 0 2 0 nil 0) (2 0 3 0 nil 0) (0 0 5 0 nil 0) (1 0 6 0 nil 0))) 1 "omloop" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 580 427) (om-make-point 36 27) 100 "100" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 385 427) (om-make-point 54 30) (list 0 100) "(0 100)" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 284 457) (om-make-point 348 112) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6300) (6000) (7600) (6000) (7700) (6000) (6000) (4800) (7800) (6000) (7500) (7300) (6000) (6000) (6000) (6000) (4600) (6000) (6500) (4700) (5900) (4700) (6800) (4700) (7200) (5900) (4200) (4700) (7300) (4700) (4700) (5400) (5300) (4400) (4700) (6700) (5300) (4700) (4700) (5300) (5300) (7400) (5300) (5300) (5800) (6500) (5300) (5300) (5300) (5300) (5300) (5300) (5300) (6200) (5300) (5300) (6400) (5700) (5300) (4500) (7000) (7000) (6600) (5400) (7000) (7000) (7000) (4900) (7200) (4800) (7000) (8100) (4700) (4900) (4900) (7000) (5300) (7000) (7000) (4900) (8100) (4200) (8100) (8100) (8100) (8100) (8100) (8100) (5200) (4900) (6100) (6500) (6400) (8100) (4400) (7100) (8100) (8100) (8100))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 10000)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player scale approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list (quote :midishare) nil 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 (quote t))) t nil nil nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 498 144) (om-make-point 72 137) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 4700 5300 7000 8100)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) thechord) "x" nil (pairlis (quote (player scale inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list (quote :midishare) nil 0 0 (om-make-point 0 -3) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2 1 nil 1000 0 18350450 2621450 0 0 (quote t))) t nil nil nil) (om-load-boxcall (quote lispfun) "FUNCALL" (quote funcall) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 223 383) (om-make-point 301 37) nil nil nil 1) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 352 59) (om-make-point 69 136) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600 9500 8800 8100 7600 8600)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) thechord) "x" nil (pairlis (quote (player scale inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems)) (list (quote :midishare) nil 0 0 (om-make-point 0 -3) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2 1 nil 1000 0 18350450 2621450 0 0 (quote t))) t nil nil nil) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" nil) (om-load-inputfun (quote input-funbox) "else" "ELSE" nil))) (om-make-point 126 314) (om-make-point 272 53) nil nil nil 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 195 220) (om-make-point 21 25) 0 "0" nil) (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "SELF" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM" 0))) (om-make-point 143 250) (om-make-point 85 35) nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 152 141) (om-make-point 20 26) 1 "1" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 123 141) (om-make-point 20 27) 0 "0" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 0))) (om-make-point 116 171) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "tutorial_18" (om-load-patch-abs1 "tutorial_18" (quote ((om-load-boxin "input1" 1 (om-make-point 240 31) "no documentation" nil nil nil) (om-load-boxin "input" 0 (om-make-point 167 30) "no documentation" nil nil nil) (om-load-boxout "output" 0 (om-make-point 239 392) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcomment "comment1111" (om-make-point 16 21) (quote "F") "" (om-make-point 221 330) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 291 144) (om-make-point 20 27) 1.0 "1.0" nil) (om-load-boxcomment "comment111" (om-make-point 16 21) (quote "E") "" (om-make-point 215 273) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 16 21) (quote "C") "" (om-make-point 153 187) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 16 21) (quote "B") "" (om-make-point 301 101) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 16 21) (quote "A") "" (om-make-point 139 98) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 261 144) (om-make-point 23 27) 12 "12" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 274 232) (om-make-point 25 27) 4 "4" nil) (om-load-boxcall (quote genfun) "INTERPOLATION" (quote interpolation) (quote ((om-load-inputfun (quote input-funbox) "a number" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "a number" "END" 1) (om-load-inputfun (quote input-funbox) "an integer" "SAMPLES" 5) (om-load-inputfun (quote input-funbox) "a number in [0.0 2.0]" "CURVE" 1.0))) (om-make-point 181 176) (om-make-point 152 53) nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 241 259) (om-make-point 41 53) nil nil (list (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 145 373) (om-make-point 53 53) nil nil 0) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 207 373) (om-make-point 47 53) nil nil 0) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 161 281) (om-make-point 47 53) nil nil nil 3) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 5))) (om-make-point 129 219) (om-make-point 116 53) nil nil nil 1) (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil))) (om-make-point 99 149) (om-make-point 65 53) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 107 90) (om-make-point 53 53) nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 115 29) "no documentation" nil nil nil) (om-load-boxin "input1" 1 (om-make-point 179 31) "no documentation" "n-samples" nil nil)) (quote ((2 0 0 0 nil 0) (2 1 1 0 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (7 0 3 1 nil 0) (5 0 4 0 nil 0) (6 0 5 0 nil 0))) 1 "omloop" nil) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 245 315) (om-make-point 29 53) nil nil nil 1))) (quote ((13 0 2 0 nil 0) (1 0 11 0 nil 0) (0 0 11 1 nil 0) (9 0 11 2 nil 0) (4 0 11 3 nil 0) (11 0 12 0 nil 0) (10 0 12 1 nil 0) (12 0 13 0 nil 0))) 6.010003 nil "") (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 317 205) nil nil "l" "tutorial_18"))) (quote ((14 0 12 1 nil 0) (11 0 12 2 nil 0) (10 0 12 7 nil 0) (16 0 14 0 nil 0) (13 1 14 1 nil 0) (18 0 16 0 nil 0) (9 0 16 1 nil 0) (22 0 16 2 nil 0) (21 0 18 0 nil 0) (17 0 18 1 nil 0) (20 0 21 0 nil 0) (19 0 21 1 nil 0) (15 1 22 1 nil 0))) nil 6.010003))

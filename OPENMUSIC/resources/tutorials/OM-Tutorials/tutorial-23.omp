; OM File Header - Saved 2025/03/09 13:31:10
; (6.050101 :patc (om-make-point 283 180) (om-make-point 50 50) (om-make-point 500 400) "No documentation " 183 0 nil "2023/04/09 18:13:49")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "tutorial-23" (quote ((om-load-boxcomment "comment1112" (om-make-point 255 31) (quote "TUTORIAL 23 - CHORD-SEQ (II)") "" (om-make-point 176 15) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "OMLOOP1" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "durs" nil))) (om-make-point 143 102) (om-make-point 220 53) nil nil (list (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 142 426) (om-make-point 27 30) nil "nil" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 365 427) (om-make-point 23 28) nil "nil" nil) (om-load-boxcomment "comment8" (om-make-point 14 17) (quote "F") "" (om-make-point 280 472) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment7" (om-make-point 16 19) (quote "E") "" (om-make-point 279 386) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment6" (om-make-point 18 19) (quote "D") "" (om-make-point 276 329) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment5" (om-make-point 20 32) (quote "C") "" (om-make-point 248 252) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment4" (om-make-point 17 19) (quote "B") "" (om-make-point 248 134) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment3" (om-make-point 15 18) (quote "A") "" (om-make-point 71 123) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment2" (om-make-point 27 35) (quote "G") "" (om-make-point 248 531) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 10 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "REMOVE1" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 367 455) nil nil nil "remove" 1) (om-load-boxcall (quote genfun) "collect1" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 325 371) (om-make-point 139 53) nil nil nil 3) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 355 237) (om-make-point 20 24) 0 "0" nil) (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "SELF" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM" 1))) (om-make-point 327 262) (om-make-point 53 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" nil) (om-load-inputfun (quote input-funbox) "else" "ELSE" nil))) (om-make-point 305 306) (om-make-point 185 53) nil nil nil 1) (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 155 458) nil nil nil "remove" 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 105 366) (om-make-point 130 53) nil nil nil 3) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 130 242) (om-make-point 20 26) 0 "0" nil) (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "SELF" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM" 1))) (om-make-point 100 268) (om-make-point 53 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" nil) (om-load-inputfun (quote input-funbox) "else" "ELSE" nil))) (om-make-point 80 312) (om-make-point 177 58) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist1" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 196 238) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 203 95) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 201 157) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 92 110) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 104 32) "no documentation" "durs" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil) (om-load-inputfun (quote input-funbox) "patch" "OPPATCH" nil))) (om-make-point 304 515) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil) (om-load-inputfun (quote input-funbox) "patch" "OPPATCH" nil))) (om-make-point 118 515) nil nil nil 0)) (quote ((1 0 9 0 nil 0) (10 1 9 1 nil 0) (13 0 10 0 nil 0) (22 0 12 0 nil 3) (11 0 12 1 nil 0) (12 0 13 0 nil 0) (22 0 13 2 nil 3) (0 0 14 0 nil 0) (15 1 14 1 nil 0) (18 0 15 0 nil 0) (22 0 17 0 nil 3) (16 0 17 1 nil 0) (17 0 18 0 nil 0) (19 0 18 2 nil 0) (21 0 19 0 nil 0) (23 0 20 0 nil 0) (20 0 21 1 nil 0) (23 0 22 0 nil 0) (14 0 24 0 nil 0) (9 0 24 1 nil 0) (15 0 25 0 nil 0) (10 0 25 1 nil 0))) 2 "omloop1" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 183 64) (om-make-point 158 30) (list -1000 2000 -1000 2000) "(-1000 2000 -1000 2000)" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 136 177) (om-make-point 289 93) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6000))) :lonset (quote (1000 4000 7000)) :ldur (quote ((2000) (2000))) :lvel (quote ((100) (100))) :loffset (quote ((0) (0))) :lchan (quote ((1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.050101 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx player)) (list nil (quote t) 0 0 (om-make-point 10 40) (om-make-point 500 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midishare))) t nil nil nil))) (quote ((2 0 1 0 nil 0) (1 0 3 2 nil 0) (1 1 3 3 nil 0))) nil 6.050101))

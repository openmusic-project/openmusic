; OM File Header - Saved 2025/03/09 13:31:10
; (7.04 :patc (om-make-point 405 71) (om-make-point 0 0) (om-make-point 648 639) "No documentation " 183 0 nil "2023/04/09 18:13:49")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "tutorial_07" (quote ((om-load-boxcomment "comment11" (om-make-point 376 37) (quote "TUTORIAL 7 - Expansion/Compression of intervals") "" (om-make-point 175 21) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 25 30) (quote "B") "" (om-make-point 248 277) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 19 34) (quote "D") "" (om-make-point 373 331) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 24 37) (quote "G") "" (om-make-point 261 396) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 189 395) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 350 320) (om-make-point 24 35) nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 271 259) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 15 18) (quote "H") "" (om-make-point 370 439) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 25 42) (quote "F") "" (om-make-point 248 335) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 19 25) (quote "E") "" (om-make-point 103 279) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 28 39) (quote "C") "" (om-make-point 391 257) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 15 32) (quote "A") "" (om-make-point 141 123) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100))) (om-make-point 121 466) (om-make-point 290 121) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6400) (5850) (6150) (5350) (5400) (5600))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale winpos winsize mode grillestep notechancolor? zoom cmnpref staff fontsize approx deltapict outport inport palette-mode obj-mode show-stems player)) (list nil 2621450 18350450 0 1000 nil 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4 (om-make-point 0 0) 1 0 0 0 (quote t) (quote :midishare))) t nil nil nil) (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 201 327) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "ARG-0" "ARG-0" nil))) (om-make-point 125 278) nil nil nil "first" 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 352 262) (om-make-point 32 30) 0.5 "0.5" nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 182 113) (om-make-point 92 109) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6800 5700 6300 4700 4800 5200)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale winpos winsize mode grillestep notechancolor? zoom cmnpref staff fontsize approx deltapict outport inport palette-mode obj-mode show-stems player)) (list nil 2621450 18350450 0 1000 nil 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2 (om-make-point 0 -5) 0 0 0 0 (quote t) (quote :midishare))) t nil nil nil))) (quote ((13 0 4 0 nil 0) (6 0 5 0 nil 0) (15 0 5 1 nil 0) (16 1 6 0 nil 0) (4 0 12 1 nil 0) (14 0 13 0 nil 0) (5 0 13 1 ((om-make-point 360 353) (om-make-point 308 353) (om-make-point 261 321) (om-make-point 229 321) (om-make-point 229 327)) 0) (16 1 14 0 nil 0))) nil 6.050101))

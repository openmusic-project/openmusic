; OM File Header - Saved 2025/03/09 13:31:10
; (7.06 :patc (om-make-point 221 289) (om-make-point 0 0) (om-make-point 1177 694) "" 183 0 nil "2025/03/09 13:30:29")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "tutorial-44 tuning and notation menu" (quote ((let ((box (om-load-boxcomment "comment 8" (om-make-point 799 555) (quote "SUMMARY$$This tutorial demonstrates how the 'Tuning and notation' menu is used to define how pitch (midicent) values are quantised and notated within a score object.$$$'TUNING AND NOTATION' MENU$$OpenMusic supports playback and notation for several EDO (equal divisions of the octave) tuning systems in score objects (i.e. NOTE, CHORD, CHORD-SEQ, MULTI-SEQ, VOICE, POLY, and TRACKS). These are is defined within each score editor's 'Tuning and notation' menu.$$On the bottom right-hand side of score editor windows (next to 'Approx'), a button displays the currently selected tuning and notation system. Clicking this opens the 'Tuning and notation' menu for that score object.$$The menu's left-hand panel displays a list of all available tuning systems, which control how pitch (midicent) values are quantised.$$The central panel displays a list of all available notation systems for the selected tuning system, defining how the pitches are represented on the stave. $$The right-hand panel provides a technical description of the currently selected tuning and notation systems.$$Pressing 'Apply' will:$$1) Quantise all pitch values within that score object to their closest approximation within the selected tuning system. $2) Re-notate all pitches according to the selected notation system.$$$TUTORIAL CONTENTS$$In this tutorial, each internal patch contains several CHORD-SEQ objects. Each CHORD-SEQ displays one octave of a chromatic scale in the specified EDO tuning.$$For demonstration purposes, cent values are displayed below each pitch. These indicate each pitch's distance from the tonic, measured in cents. In this case, the tonic is C4.$$Important: In OpenMusic, all EDO tuning calculations use middle C (midicent value 6000, ~261.626 Hz) as the reference pitch. This means that C (and its octave transpositions) will always be tuned to multiples of ~261.626 Hz, while the tuning of other notes (E, F, F#, etc.) depends on the selected tuning system.$") "" (om-make-point 251 85) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "6" (om-load-patch-abs1 "6" (quote ((let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE 2" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 96))) (om-make-point 1161 73) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE 2" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 84))) (om-make-point 797 81) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE 2" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 72))) (om-make-point 412 77) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE 2" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 60))) (om-make-point 55 72) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1137 129) (om-make-point 280 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6012) (6025) (6038) (6050) (6062) (6075) (6088) (6100) (6112) (6125) (6138) (6150) (6162) (6175) (6188) (6200) (6212) (6225) (6238) (6250) (6262) (6275) (6288) (6300) (6312) (6325) (6338) (6350) (6362) (6375) (6388) (6400) (6412) (6425) (6438) (6450) (6462) (6475) (6488) (6500) (6512) (6525) (6538) (6550) (6562) (6575) (6588) (6600) (6612) (6625) (6638) (6650) (6662) (6675) (6688) (6700) (6712) (6725) (6738) (6750) (6762) (6775) (6788) (6800) (6812) (6825) (6838) (6850) (6862) (6875) (6888) (6900) (6912) (6925) (6938) (6950) (6962) (6975) (6988) (7000) (7012) (7025) (7038) (7050) (7062) (7075) (7088) (7100) (7112) (7125) (7138) (7150) (7162) (7175) (7188) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500 9000 9500 10000 10500 11000 11500 12000 12500 13000 13500 14000 14500 15000 15500 16000 16500 17000 17500 18000 18500 19000 19500 20000 20500 21000 21500 22000 22500 23000 23500 24000 24500 25000 25500 26000 26500 27000 27500 28000 28500 29000 29500 30000 30500 31000 31500 32000 32500 33000 33500 34000 34500 35000 35500 36000 36500 37000 37500 38000 38500 39000 39500 40000 40500 41000 41500 42000 42500 43000 43500 44000 44500 45000 45500 46000 46500 47000 47500 48000 49000)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "12" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "25" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "38" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "50" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "62" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "75" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "88" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "100" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "112" :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "125" :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "138" :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "150" :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "162" :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "175" :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "188" :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "200" :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "212" :from-file t))) ((18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "225" :from-file t))) ((19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "238" :from-file t))) ((20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "250" :from-file t))) ((21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "262" :from-file t))) ((22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "275" :from-file t))) ((23 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "288" :from-file t))) ((24 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "300" :from-file t))) ((25 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "312" :from-file t))) ((26 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "325" :from-file t))) ((27 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "338" :from-file t))) ((28 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "350" :from-file t))) ((29 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "362" :from-file t))) ((30 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "375" :from-file t))) ((31 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "388" :from-file t))) ((32 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "400" :from-file t))) ((33 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "412" :from-file t))) ((34 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "425" :from-file t))) ((35 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "438" :from-file t))) ((36 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "450" :from-file t))) ((37 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "462" :from-file t))) ((38 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "475" :from-file t))) ((39 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "488" :from-file t))) ((40 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "500" :from-file t))) ((41 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "512" :from-file t))) ((42 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "525" :from-file t))) ((43 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "538" :from-file t))) ((44 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "550" :from-file t))) ((45 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "562" :from-file t))) ((46 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "575" :from-file t))) ((47 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "588" :from-file t))) ((48 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "600" :from-file t))) ((49 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "612" :from-file t))) ((50 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "625" :from-file t))) ((51 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "638" :from-file t))) ((52 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "650" :from-file t))) ((53 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "662" :from-file t))) ((54 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "675" :from-file t))) ((55 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "688" :from-file t))) ((56 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "700" :from-file t))) ((57 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "712" :from-file t))) ((58 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "725" :from-file t))) ((59 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "738" :from-file t))) ((60 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "750" :from-file t))) ((61 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "762" :from-file t))) ((62 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "775" :from-file t))) ((63 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "788" :from-file t))) ((64 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "800" :from-file t))) ((65 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "812" :from-file t))) ((66 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "825" :from-file t))) ((67 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "838" :from-file t))) ((68 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "850" :from-file t))) ((69 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "862" :from-file t))) ((70 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "875" :from-file t))) ((71 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "888" :from-file t))) ((72 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "900" :from-file t))) ((73 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "912" :from-file t))) ((74 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "925" :from-file t))) ((75 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "938" :from-file t))) ((76 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "950" :from-file t))) ((77 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "962" :from-file t))) ((78 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "975" :from-file t))) ((79 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "988" :from-file t))) ((80 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1000" :from-file t))) ((81 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1012" :from-file t))) ((82 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1025" :from-file t))) ((83 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1038" :from-file t))) ((84 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1050" :from-file t))) ((85 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1062" :from-file t))) ((86 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1075" :from-file t))) ((87 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1088" :from-file t))) ((88 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1100" :from-file t))) ((89 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1112" :from-file t))) ((90 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1125" :from-file t))) ((91 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1138" :from-file t))) ((92 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1150" :from-file t))) ((93 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1162" :from-file t))) ((94 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1175" :from-file t))) ((95 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1188" :from-file t))) ((96 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 851 936) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 960.0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 773 133) (om-make-point 280 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6014) (6029) (6043) (6057) (6071) (6086) (6100) (6114) (6129) (6143) (6157) (6171) (6186) (6200) (6214) (6229) (6243) (6257) (6271) (6286) (6300) (6314) (6329) (6343) (6357) (6371) (6386) (6400) (6414) (6429) (6443) (6457) (6471) (6486) (6500) (6514) (6529) (6543) (6557) (6571) (6586) (6600) (6614) (6629) (6643) (6657) (6671) (6686) (6700) (6714) (6729) (6743) (6757) (6771) (6786) (6800) (6814) (6829) (6843) (6857) (6871) (6886) (6900) (6914) (6929) (6943) (6957) (6971) (6986) (7000) (7014) (7029) (7043) (7057) (7071) (7086) (7100) (7114) (7129) (7143) (7157) (7171) (7186) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500 9000 9500 10000 10500 11000 11500 12000 12500 13000 13500 14000 14500 15000 15500 16000 16500 17000 17500 18000 18500 19000 19500 20000 20500 21000 21500 22000 22500 23000 23500 24000 24500 25000 25500 26000 26500 27000 27500 28000 28500 29000 29500 30000 30500 31000 31500 32000 32500 33000 33500 34000 34500 35000 35500 36000 36500 37000 37500 38000 38500 39000 39500 40000 40500 41000 41500 42000 43000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "14" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "29" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "43" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "57" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "71" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "86" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "100" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "114" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "129" :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "143" :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "157" :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "171" :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "186" :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "200" :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "214" :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "229" :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "243" :from-file t))) ((18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "257" :from-file t))) ((19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "271" :from-file t))) ((20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "286" :from-file t))) ((21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "300" :from-file t))) ((22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "314" :from-file t))) ((23 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "329" :from-file t))) ((24 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "343" :from-file t))) ((25 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "357" :from-file t))) ((26 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "371" :from-file t))) ((27 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "386" :from-file t))) ((28 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "400" :from-file t))) ((29 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "414" :from-file t))) ((30 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "429" :from-file t))) ((31 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "443" :from-file t))) ((32 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "457" :from-file t))) ((33 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "471" :from-file t))) ((34 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "486" :from-file t))) ((35 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "500" :from-file t))) ((36 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "514" :from-file t))) ((37 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "529" :from-file t))) ((38 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "543" :from-file t))) ((39 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "557" :from-file t))) ((40 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "571" :from-file t))) ((41 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "586" :from-file t))) ((42 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "600" :from-file t))) ((43 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "614" :from-file t))) ((44 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "629" :from-file t))) ((45 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "643" :from-file t))) ((46 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "657" :from-file t))) ((47 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "671" :from-file t))) ((48 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "686" :from-file t))) ((49 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "700" :from-file t))) ((50 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "714" :from-file t))) ((51 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "729" :from-file t))) ((52 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "743" :from-file t))) ((53 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "757" :from-file t))) ((54 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "771" :from-file t))) ((55 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "786" :from-file t))) ((56 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "800" :from-file t))) ((57 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "814" :from-file t))) ((58 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "829" :from-file t))) ((59 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "843" :from-file t))) ((60 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "857" :from-file t))) ((61 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "871" :from-file t))) ((62 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "886" :from-file t))) ((63 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "900" :from-file t))) ((64 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "914" :from-file t))) ((65 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "929" :from-file t))) ((66 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "943" :from-file t))) ((67 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "957" :from-file t))) ((68 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "971" :from-file t))) ((69 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "986" :from-file t))) ((70 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1000" :from-file t))) ((71 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1014" :from-file t))) ((72 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1029" :from-file t))) ((73 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1043" :from-file t))) ((74 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1057" :from-file t))) ((75 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1071" :from-file t))) ((76 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1086" :from-file t))) ((77 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1100" :from-file t))) ((78 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1114" :from-file t))) ((79 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1129" :from-file t))) ((80 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1143" :from-file t))) ((81 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1157" :from-file t))) ((82 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1171" :from-file t))) ((83 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1186" :from-file t))) ((84 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 871 862) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 840.0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 388 134) (om-make-point 280 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6017) (6033) (6050) (6067) (6083) (6100) (6117) (6133) (6150) (6167) (6183) (6200) (6217) (6233) (6250) (6267) (6283) (6300) (6317) (6333) (6350) (6367) (6383) (6400) (6417) (6433) (6450) (6467) (6483) (6500) (6517) (6533) (6550) (6567) (6583) (6600) (6617) (6633) (6650) (6667) (6683) (6700) (6717) (6733) (6750) (6767) (6783) (6800) (6817) (6833) (6850) (6867) (6883) (6900) (6917) (6933) (6950) (6967) (6983) (7000) (7017) (7033) (7050) (7067) (7083) (7100) (7117) (7133) (7150) (7167) (7183) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500 9000 9500 10000 10500 11000 11500 12000 12500 13000 13500 14000 14500 15000 15500 16000 16500 17000 17500 18000 18500 19000 19500 20000 20500 21000 21500 22000 22500 23000 23500 24000 24500 25000 25500 26000 26500 27000 27500 28000 28500 29000 29500 30000 30500 31000 31500 32000 32500 33000 33500 34000 34500 35000 35500 36000 37000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "17" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "33" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "50" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "67" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "83" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "100" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "117" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "133" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "150" :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "167" :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "183" :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "200" :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "217" :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "233" :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "250" :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "267" :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "283" :from-file t))) ((18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "300" :from-file t))) ((19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "317" :from-file t))) ((20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "333" :from-file t))) ((21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "350" :from-file t))) ((22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "367" :from-file t))) ((23 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "383" :from-file t))) ((24 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "400" :from-file t))) ((25 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "417" :from-file t))) ((26 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "433" :from-file t))) ((27 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "450" :from-file t))) ((28 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "467" :from-file t))) ((29 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "483" :from-file t))) ((30 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "500" :from-file t))) ((31 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "517" :from-file t))) ((32 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "533" :from-file t))) ((33 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "550" :from-file t))) ((34 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "567" :from-file t))) ((35 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "583" :from-file t))) ((36 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "600" :from-file t))) ((37 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "617" :from-file t))) ((38 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "633" :from-file t))) ((39 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "650" :from-file t))) ((40 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "667" :from-file t))) ((41 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "683" :from-file t))) ((42 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "700" :from-file t))) ((43 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "717" :from-file t))) ((44 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "733" :from-file t))) ((45 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "750" :from-file t))) ((46 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "767" :from-file t))) ((47 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "783" :from-file t))) ((48 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "800" :from-file t))) ((49 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "817" :from-file t))) ((50 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "833" :from-file t))) ((51 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "850" :from-file t))) ((52 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "867" :from-file t))) ((53 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "883" :from-file t))) ((54 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "900" :from-file t))) ((55 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "917" :from-file t))) ((56 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "933" :from-file t))) ((57 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "950" :from-file t))) ((58 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "967" :from-file t))) ((59 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "983" :from-file t))) ((60 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1000" :from-file t))) ((61 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1017" :from-file t))) ((62 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1033" :from-file t))) ((63 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1050" :from-file t))) ((64 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1067" :from-file t))) ((65 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1083" :from-file t))) ((66 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1100" :from-file t))) ((67 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1117" :from-file t))) ((68 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1133" :from-file t))) ((69 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1150" :from-file t))) ((70 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1167" :from-file t))) ((71 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1183" :from-file t))) ((72 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 865 774) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 720.0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 31 129) (om-make-point 280 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6020) (6040) (6060) (6080) (6100) (6120) (6140) (6160) (6180) (6200) (6220) (6240) (6260) (6280) (6300) (6320) (6340) (6360) (6380) (6400) (6420) (6440) (6460) (6480) (6500) (6520) (6540) (6560) (6580) (6600) (6620) (6640) (6660) (6680) (6700) (6720) (6740) (6760) (6780) (6800) (6820) (6840) (6860) (6880) (6900) (6920) (6940) (6960) (6980) (7000) (7020) (7040) (7060) (7080) (7100) (7120) (7140) (7160) (7180) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500 9000 9500 10000 10500 11000 11500 12000 12500 13000 13500 14000 14500 15000 15500 16000 16500 17000 17500 18000 18500 19000 19500 20000 20500 21000 21500 22000 22500 23000 23500 24000 24500 25000 25500 26000 26500 27000 27500 28000 28500 29000 29500 30000 31000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "20" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "40" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "60" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "80" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "100" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "120" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "140" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "160" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "180" :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "200" :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "220" :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "240" :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "260" :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "280" :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "300" :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "320" :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "340" :from-file t))) ((18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "360" :from-file t))) ((19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "380" :from-file t))) ((20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "400" :from-file t))) ((21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "420" :from-file t))) ((22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "440" :from-file t))) ((23 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "460" :from-file t))) ((24 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "480" :from-file t))) ((25 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "500" :from-file t))) ((26 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "520" :from-file t))) ((27 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "540" :from-file t))) ((28 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "560" :from-file t))) ((29 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "580" :from-file t))) ((30 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "600" :from-file t))) ((31 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "620" :from-file t))) ((32 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "640" :from-file t))) ((33 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "660" :from-file t))) ((34 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "680" :from-file t))) ((35 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "700" :from-file t))) ((36 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "720" :from-file t))) ((37 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "740" :from-file t))) ((38 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "760" :from-file t))) ((39 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "780" :from-file t))) ((40 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "800" :from-file t))) ((41 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "820" :from-file t))) ((42 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "840" :from-file t))) ((43 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "860" :from-file t))) ((44 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "880" :from-file t))) ((45 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "900" :from-file t))) ((46 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "920" :from-file t))) ((47 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "940" :from-file t))) ((48 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "960" :from-file t))) ((49 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "980" :from-file t))) ((50 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1000" :from-file t))) ((51 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1020" :from-file t))) ((52 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1040" :from-file t))) ((53 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1060" :from-file t))) ((54 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1080" :from-file t))) ((55 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1100" :from-file t))) ((56 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1120" :from-file t))) ((57 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1140" :from-file t))) ((58 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1160" :from-file t))) ((59 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1180" :from-file t))) ((60 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 1049 788) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 600.0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 69 32) (quote "96 EDO") "" (om-make-point 1247 44) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 4" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 1250 293) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN 4" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 1269 242) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING 4" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 1159 363) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT 4" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 1149 402) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 4" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 1175 299) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 69 32) (quote "84 EDO") "" (om-make-point 879 49) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 3" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 898 303) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN 3" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 917 245) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING 3" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 795 364) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT 3" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 785 414) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 811 305) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 69 32) (quote "72 EDO") "" (om-make-point 499 49) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 483 309) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 519 246) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING 2" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 410 364) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT 2" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 400 402) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 426 300) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 69 32) (quote "60 EDO") "" (om-make-point 138 41) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 177 306) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN 2" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 196 245) nil (list 6000) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 53 354) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 43 392) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 69 292) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 4 1 nil 0) (1 0 5 1 nil 0) (2 0 6 1 nil 0) (3 0 7 1 nil 0) (4 1 9 0 nil 0) (10 0 9 1 nil 0) (4 1 10 0 nil 0) (13 0 11 0 nil 0) (4 0 12 0 nil 0) (11 0 12 1 nil 0) (9 0 13 0 nil 0) (5 1 15 0 nil 0) (16 0 15 1 nil 0) (5 1 16 0 nil 0) (19 0 17 0 nil 0) (5 0 18 0 nil 0) (17 0 18 1 nil 0) (15 0 19 0 nil 0) (6 1 21 0 nil 0) (22 0 21 1 nil 0) (6 1 22 0 nil 0) (25 0 23 0 nil 0) (6 0 24 0 nil 0) (23 0 24 1 nil 0) (21 0 25 0 nil 0) (7 1 27 0 nil 0) (28 0 27 1 nil 0) (7 1 28 0 nil 0) (31 0 29 0 nil 0) (7 0 30 0 nil 0) (29 0 30 1 nil 0) (27 0 31 0 nil 0))) 7.06 nil "" (om-make-point 0 0) (om-make-point 1489 563)) (quote nil) (om-make-point 120 507) nil nil nil "6"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 134 26) (quote "EDOs: 60, 72, 84, 96") "" (om-make-point 75 491) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "5" (om-load-patch-abs1 "5" (quote ((let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 48))) (om-make-point 1105 67) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 42))) (om-make-point 755 69) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 36))) (om-make-point 427 66) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 31))) (om-make-point 57 66) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1081 119) (om-make-point 280 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6025) (6050) (6075) (6100) (6125) (6150) (6175) (6200) (6225) (6250) (6275) (6300) (6325) (6350) (6375) (6400) (6425) (6450) (6475) (6500) (6525) (6550) (6575) (6600) (6625) (6650) (6675) (6700) (6725) (6750) (6775) (6800) (6825) (6850) (6875) (6900) (6925) (6950) (6975) (7000) (7025) (7050) (7075) (7100) (7125) (7150) (7175) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500 9000 9500 10000 10500 11000 11500 12000 12500 13000 13500 14000 14500 15000 15500 16000 16500 17000 17500 18000 18500 19000 19500 20000 20500 21000 21500 22000 22500 23000 23500 24000 25000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "25" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "50" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "75" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "100" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "125" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "150" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "175" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "200" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "225" :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "250" :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "275" :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "300" :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "325" :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "350" :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "375" :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "400" :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "425" :from-file t))) ((18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "450" :from-file t))) ((19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "475" :from-file t))) ((20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "500" :from-file t))) ((21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "525" :from-file t))) ((22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "550" :from-file t))) ((23 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "575" :from-file t))) ((24 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "600" :from-file t))) ((25 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "625" :from-file t))) ((26 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "650" :from-file t))) ((27 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "675" :from-file t))) ((28 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "700" :from-file t))) ((29 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "725" :from-file t))) ((30 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "750" :from-file t))) ((31 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "775" :from-file t))) ((32 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "800" :from-file t))) ((33 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "825" :from-file t))) ((34 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "850" :from-file t))) ((35 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "875" :from-file t))) ((36 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "900" :from-file t))) ((37 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "925" :from-file t))) ((38 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "950" :from-file t))) ((39 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "975" :from-file t))) ((40 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1000" :from-file t))) ((41 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1025" :from-file t))) ((42 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1050" :from-file t))) ((43 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1075" :from-file t))) ((44 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1100" :from-file t))) ((45 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1125" :from-file t))) ((46 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1150" :from-file t))) ((47 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1175" :from-file t))) ((48 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 921 610) 0 1000 nil 11/10 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 480.0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 731 124) (om-make-point 280 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6029) (6057) (6086) (6114) (6143) (6171) (6200) (6229) (6257) (6286) (6314) (6343) (6371) (6400) (6429) (6457) (6486) (6514) (6543) (6571) (6600) (6629) (6657) (6686) (6714) (6743) (6771) (6800) (6829) (6857) (6886) (6914) (6943) (6971) (7000) (7029) (7057) (7086) (7114) (7143) (7171) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500 9000 9500 10000 10500 11000 11500 12000 12500 13000 13500 14000 14500 15000 15500 16000 16500 17000 17500 18000 18500 19000 19500 20000 20500 21000 22000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "29" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "57" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "86" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "114" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "143" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "171" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "200" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "229" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "257" :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "286" :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "314" :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "343" :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "371" :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "400" :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "429" :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "457" :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "486" :from-file t))) ((18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "514" :from-file t))) ((19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "543" :from-file t))) ((20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "571" :from-file t))) ((21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "600" :from-file t))) ((22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "629" :from-file t))) ((23 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "657" :from-file t))) ((24 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "686" :from-file t))) ((25 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "714" :from-file t))) ((26 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "743" :from-file t))) ((27 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "771" :from-file t))) ((28 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "800" :from-file t))) ((29 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "829" :from-file t))) ((30 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "857" :from-file t))) ((31 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "886" :from-file t))) ((32 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "914" :from-file t))) ((33 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "943" :from-file t))) ((34 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "971" :from-file t))) ((35 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1000" :from-file t))) ((36 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1029" :from-file t))) ((37 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1057" :from-file t))) ((38 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1086" :from-file t))) ((39 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1114" :from-file t))) ((40 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1143" :from-file t))) ((41 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1171" :from-file t))) ((42 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 921 556) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 420.0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 403 125) (om-make-point 280 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6033) (6067) (6100) (6133) (6167) (6200) (6233) (6267) (6300) (6333) (6367) (6400) (6433) (6467) (6500) (6533) (6567) (6600) (6633) (6667) (6700) (6733) (6767) (6800) (6833) (6867) (6900) (6933) (6967) (7000) (7033) (7067) (7100) (7133) (7167) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500 9000 9500 10000 10500 11000 11500 12000 12500 13000 13500 14000 14500 15000 15500 16000 16500 17000 17500 18000 19000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "33" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "67" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "100" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "133" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "167" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "200" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "233" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "267" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "300" :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "333" :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "367" :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "400" :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "433" :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "467" :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "500" :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "533" :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "567" :from-file t))) ((18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "600" :from-file t))) ((19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "633" :from-file t))) ((20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "667" :from-file t))) ((21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "700" :from-file t))) ((22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "733" :from-file t))) ((23 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "767" :from-file t))) ((24 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "800" :from-file t))) ((25 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "833" :from-file t))) ((26 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "867" :from-file t))) ((27 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "900" :from-file t))) ((28 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "933" :from-file t))) ((29 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "967" :from-file t))) ((30 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1000" :from-file t))) ((31 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1033" :from-file t))) ((32 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1067" :from-file t))) ((33 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1100" :from-file t))) ((34 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1133" :from-file t))) ((35 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1167" :from-file t))) ((36 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 888 525) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 360.0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 33 124) (om-make-point 280 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6039) (6077) (6116) (6155) (6194) (6232) (6271) (6310) (6348) (6387) (6426) (6465) (6503) (6542) (6581) (6619) (6658) (6697) (6735) (6774) (6813) (6852) (6890) (6929) (6968) (7006) (7045) (7084) (7123) (7161) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500 9000 9500 10000 10500 11000 11500 12000 12500 13000 13500 14000 14500 15000 15500 16500)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "39" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "77" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "116" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "155" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "194" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "232" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "271" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "310" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "348" :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "387" :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "426" :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "465" :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "503" :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "542" :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "581" :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "619" :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "658" :from-file t))) ((18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "697" :from-file t))) ((19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "735" :from-file t))) ((20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "774" :from-file t))) ((21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "813" :from-file t))) ((22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "852" :from-file t))) ((23 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "890" :from-file t))) ((24 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "929" :from-file t))) ((25 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "968" :from-file t))) ((26 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1006" :from-file t))) ((27 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1045" :from-file t))) ((28 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1084" :from-file t))) ((29 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1123" :from-file t))) ((30 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1161" :from-file t))) ((31 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 853 500) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 310)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 69 32) (quote "48 EDO") "" (om-make-point 1192 39) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 4" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 1190 306) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN 4" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 1209 232) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING 4" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 1103 364) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT 4" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 1093 402) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 4" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 1119 304) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 69 32) (quote "42 EDO") "" (om-make-point 859 39) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 3" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 838 296) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN 3" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 857 232) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING 3" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 753 364) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT 3" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 743 402) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 769 301) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 69 32) (quote "36 EDO") "" (om-make-point 499 39) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 518 296) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 537 232) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING 2" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 425 374) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT 2" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 415 412) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 441 302) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 69 32) (quote "31 EDO") "" (om-make-point 138 44) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 301) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN 2" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 156 237) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 55 359) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 45 397) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 71 291) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 4 1 nil 0) (1 0 5 1 nil 0) (2 0 6 1 nil 0) (3 0 7 1 nil 0) (4 1 9 0 nil 0) (10 0 9 1 nil 0) (4 1 10 0 nil 0) (13 0 11 0 nil 0) (4 0 12 0 nil 0) (11 0 12 1 nil 0) (9 0 13 0 nil 0) (5 1 15 0 nil 0) (16 0 15 1 nil 0) (5 1 16 0 nil 0) (19 0 17 0 nil 0) (5 0 18 0 nil 0) (17 0 18 1 nil 0) (15 0 19 0 nil 0) (6 1 21 0 nil 0) (22 0 21 1 nil 0) (6 1 22 0 nil 0) (25 0 23 0 nil 0) (6 0 24 0 nil 0) (23 0 24 1 nil 0) (21 0 25 0 nil 0) (7 1 27 0 nil 0) (28 0 27 1 nil 0) (7 1 28 0 nil 0) (31 0 29 0 nil 0) (7 0 30 0 nil 0) (29 0 30 1 nil 0) (27 0 31 0 nil 0))) 7.06 nil "" (om-make-point 104 141) (om-make-point 1432 588)) (quote nil) (om-make-point 117 422) nil nil nil "5"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 134 26) (quote "EDOs: 31, 36, 42, 48") "" (om-make-point 71 407) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "4" (om-load-patch-abs1 "4" (quote ((let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 30))) (om-make-point 1104 66) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 24))) (om-make-point 759 67) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 22))) (om-make-point 405 64) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 19))) (om-make-point 51 65) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1080 121) (om-make-point 280 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6040) (6080) (6120) (6160) (6200) (6240) (6280) (6320) (6360) (6400) (6440) (6480) (6520) (6560) (6600) (6640) (6680) (6720) (6760) (6800) (6840) (6880) (6920) (6960) (7000) (7040) (7080) (7120) (7160) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500 9000 9500 10000 10500 11000 11500 12000 12500 13000 13500 14000 14500 15000 16000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "40" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "80" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "120" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "160" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "200" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "240" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "280" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "320" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "360" :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "400" :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "440" :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "480" :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "520" :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "560" :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "600" :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "640" :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "680" :from-file t))) ((18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "720" :from-file t))) ((19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "760" :from-file t))) ((20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "800" :from-file t))) ((21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "840" :from-file t))) ((22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "880" :from-file t))) ((23 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "920" :from-file t))) ((24 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "960" :from-file t))) ((25 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1000" :from-file t))) ((26 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1040" :from-file t))) ((27 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1080" :from-file t))) ((28 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1120" :from-file t))) ((29 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1160" :from-file t))) ((30 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 851 446) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 300.0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 735 120) (om-make-point 280 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6050) (6100) (6150) (6200) (6250) (6300) (6350) (6400) (6450) (6500) (6550) (6600) (6650) (6700) (6750) (6800) (6850) (6900) (6950) (7000) (7050) (7100) (7150) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500 9000 9500 10000 10500 11000 11500 12000 13000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "50" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "100" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "150" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "200" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "250" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "300" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "350" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "400" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "450" :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "500" :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "550" :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "600" :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "650" :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "700" :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "750" :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "800" :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "850" :from-file t))) ((18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "900" :from-file t))) ((19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "950" :from-file t))) ((20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1000" :from-file t))) ((21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1050" :from-file t))) ((22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1100" :from-file t))) ((23 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1150" :from-file t))) ((24 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 874 436) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 4)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 381 118) (om-make-point 280 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6055) (6109) (6164) (6218) (6273) (6327) (6382) (6436) (6491) (6545) (6600) (6655) (6709) (6764) (6818) (6873) (6927) (6982) (7036) (7091) (7145) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500 9000 9500 10000 10500 11000 12000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "55" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "109" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "164" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "218" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "273" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "327" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "382" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "436" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "491" :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "545" :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "600" :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "655" :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "709" :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "764" :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "818" :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "873" :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "927" :from-file t))) ((18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "982" :from-file t))) ((19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1036" :from-file t))) ((20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1091" :from-file t))) ((21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1145" :from-file t))) ((22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 857 428) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 220)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 27 120) (om-make-point 280 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6063) (6126) (6189) (6253) (6316) (6379) (6442) (6505) (6568) (6632) (6695) (6758) (6821) (6884) (6947) (7011) (7074) (7137) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500 9000 9500 10500)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "63" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "126" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "189" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "253" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "316" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "379" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "442" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "505" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "568" :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "632" :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "695" :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "758" :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "821" :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "884" :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "947" :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1011" :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1074" :from-file t))) ((18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1137" :from-file t))) ((19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 856 453) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 190)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 69 32) (quote "30 EDO") "" (om-make-point 1201 35) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 4" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 1200 296) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN 4" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 1219 237) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING 4" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 1102 364) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT 4" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 1092 402) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 4" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 1117 304) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 69 32) (quote "24 EDO") "" (om-make-point 849 35) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 3" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 858 296) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN 3" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 877 237) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING 3" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 757 364) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT 3" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 747 402) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 773 304) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 69 32) (quote "22 EDO") "" (om-make-point 489 35) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 488 296) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 507 237) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING 2" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 403 364) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT 2" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 393 402) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 418 304) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 69 32) (quote "19 EDO") "" (om-make-point 129 35) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 296) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN 2" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 156 237) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 49 364) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 39 407) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 64 304) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 4 1 nil 0) (1 0 5 1 nil 0) (2 0 6 1 nil 0) (3 0 7 1 nil 0) (4 1 9 0 nil 0) (10 0 9 1 nil 0) (4 1 10 0 nil 0) (13 0 11 0 nil 0) (4 0 12 0 nil 0) (11 0 12 1 nil 0) (9 0 13 0 nil 0) (5 1 15 0 nil 0) (16 0 15 1 nil 0) (5 1 16 0 nil 0) (19 0 17 0 nil 0) (5 0 18 0 nil 0) (17 0 18 1 nil 0) (15 0 19 0 nil 0) (6 1 21 0 nil 0) (22 0 21 1 nil 0) (6 1 22 0 nil 0) (25 0 23 0 nil 0) (6 0 24 0 nil 0) (23 0 24 1 nil 0) (21 0 25 0 nil 0) (7 1 27 0 nil 0) (28 0 27 1 nil 0) (7 1 28 0 nil 0) (31 0 29 0 nil 0) (7 0 30 0 nil 0) (29 0 30 1 nil 0) (27 0 31 0 nil 0))) 7.06 nil "" (om-make-point 0 0) (om-make-point 1413 533)) (quote nil) (om-make-point 118 341) nil nil nil "4"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 134 26) (quote "EDOs: 19, 22, 24, 30") "" (om-make-point 74 328) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "3" (om-load-patch-abs1 "3" (quote ((let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 18))) (om-make-point 1144 69) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 17))) (om-make-point 766 69) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 16))) (om-make-point 380 65) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 15))) (om-make-point 53 70) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 29 131) (om-make-point 280 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6080) (6160) (6240) (6320) (6400) (6480) (6560) (6640) (6720) (6800) (6880) (6960) (7040) (7120) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8500)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "80" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "160" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "240" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "320" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "400" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "480" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "560" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "640" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "720" :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "800" :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "880" :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "960" :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1040" :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1120" :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 2 (om-make-point 307 1) (om-make-point 870 395) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 150.0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 356 128) (om-make-point 280 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6075) (6150) (6225) (6300) (6375) (6450) (6525) (6600) (6675) (6750) (6825) (6900) (6975) (7050) (7125) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 9000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "75" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "150" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "225" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "300" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "375" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "450" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "525" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "600" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "675" :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "750" :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "825" :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "900" :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "975" :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1050" :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1125" :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 2 (om-make-point 273 59) (om-make-point 848 427) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 160.0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 742 127) (om-make-point 280 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6071) (6141) (6212) (6282) (6353) (6424) (6494) (6565) (6635) (6706) (6776) (6847) (6918) (6988) (7059) (7129) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500 9500)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "71" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "141" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "212" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "282" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "353" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "424" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "494" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "565" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "635" :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "706" :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "776" :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "847" :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "918" :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "988" :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1059" :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1129" :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 845 410) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 170.0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1120 126) (om-make-point 280 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6067) (6133) (6200) (6267) (6333) (6400) (6467) (6533) (6600) (6667) (6733) (6800) (6867) (6933) (7000) (7067) (7133) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500 9000 10000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "67" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "133" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "200" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "267" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "333" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "400" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "467" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "533" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "600" :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "667" :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "733" :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "800" :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "867" :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "933" :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1000" :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1067" :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1133" :from-file t))) ((18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 839 424) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 180.0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 69 32) (quote "18 EDO") "" (om-make-point 1231 41) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 4" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 1230 294) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN 4" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 1249 235) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING 4" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 1142 345) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT 4" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 1132 383) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 4" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 1158 280) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 69 32) (quote "17 EDO") "" (om-make-point 849 41) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 3" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 868 295) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN 3" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 897 234) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING 3" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 764 344) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT 3" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 754 382) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 780 284) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 69 32) (quote "16 EDO") "" (om-make-point 465 41) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 468 303) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 497 242) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING 2" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 378 364) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT 2" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 368 402) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 394 288) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 69 32) (quote "15 EDO") "" (om-make-point 138 41) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 137 303) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN 2" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 156 242) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 51 364) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 41 402) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 67 300) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 4 1 nil 0) (2 0 5 1 nil 0) (1 0 6 1 nil 0) (0 0 7 1 nil 0) (7 1 9 0 nil 0) (10 0 9 1 nil 0) (7 1 10 0 nil 0) (13 0 11 0 nil 0) (7 0 12 0 nil 0) (11 0 12 1 nil 0) (9 0 13 0 nil 0) (6 1 15 0 nil 0) (16 0 15 1 nil 0) (6 1 16 0 nil 0) (19 0 17 0 nil 0) (6 0 18 0 nil 0) (17 0 18 1 nil 0) (15 0 19 0 nil 0) (5 1 21 0 nil 0) (22 0 21 1 nil 0) (5 1 22 0 nil 0) (25 0 23 0 nil 0) (5 0 24 0 nil 0) (23 0 24 1 nil 0) (21 0 25 0 nil 0) (4 1 27 0 nil 0) (28 0 27 1 nil 0) (4 1 28 0 nil 0) (31 0 29 0 nil 0) (4 0 30 0 nil 0) (29 0 30 1 nil 0) (27 0 31 0 nil 0))) 7.06 nil "" (om-make-point 148 98) (om-make-point 1465 618)) (quote nil) (om-make-point 116 258) nil nil nil "3"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 134 26) (quote "EDOs: 15, 16, 17, 18") "" (om-make-point 71 244) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 127 26) (quote "EDOs: 9, 10, 12, 14") "" (om-make-point 79 164) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "2" (om-load-patch-abs1 "2" (quote ((let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 14))) (om-make-point 1099 95) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 12))) (om-make-point 757 94) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 10))) (om-make-point 413 90) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 9))) (om-make-point 73 94) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1071 143) (om-make-point 301 103) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6086) (6171) (6257) (6343) (6429) (6514) (6600) (6686) (6771) (6857) (6943) (7029) (7114) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 8000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "86" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "171" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "257" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "343" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "429" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "514" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "600" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "686" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "771" :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "857" :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "943" :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1029" :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1114" :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil nil nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 1166 603) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 140.0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 731 146) (om-make-point 291 103) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 7000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "100" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "200" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "300" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "400" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "500" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "600" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "700" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "800" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "900" :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1000" :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1100" :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil nil nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 881 448) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 387 142) (om-make-point 291 103) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6120) (6240) (6360) (6480) (6600) (6720) (6840) (6960) (7080) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 6000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "120" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "240" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "360" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "480" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "600" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "720" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "840" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "960" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1080" :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil nil nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 833 556) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 100.0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 47 147) (om-make-point 291 103) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6133) (6267) (6400) (6533) (6667) (6800) (6933) (7067) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5500)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "133" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "267" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "400" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "533" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "667" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "800" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "933" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1067" :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil nil nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 833 556) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 90.0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 69 32) (quote "14 EDO") "" (om-make-point 1201 67) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 4" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 1210 323) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN 4" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 1249 252) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING 4" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 1095 374) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT 4" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 1085 412) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 4" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 1111 299) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 69 32) (quote "12 EDO") "" (om-make-point 849 67) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 3" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 878 313) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN 3" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 897 252) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING 3" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 754 364) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT 3" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 744 402) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 770 292) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 69 32) (quote "10 EDO") "" (om-make-point 509 67) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 499 313) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 537 252) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING 2" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 416 384) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT 2" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 400 422) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 432 325) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 60 32) (quote "9 EDO") "" (om-make-point 148 67) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 162 339) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN 2" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 177 264) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 70 381) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 60 429) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 80 312) (om-make-point 35 59) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 4 1 nil 0) (1 0 5 1 nil 0) (2 0 6 1 nil 0) (3 0 7 1 nil 0) (4 1 9 0 nil 0) (10 0 9 1 nil 0) (4 1 10 0 nil 0) (13 0 11 0 nil 0) (4 0 12 0 nil 0) (11 0 12 1 nil 0) (9 0 13 0 nil 0) (5 1 15 0 nil 0) (16 0 15 1 nil 0) (5 1 16 0 nil 0) (19 0 17 0 nil 0) (5 0 18 0 nil 0) (17 0 18 1 nil 0) (15 0 19 0 nil 0) (6 1 21 0 nil 0) (22 0 21 1 nil 0) (6 1 22 0 nil 0) (25 0 23 0 nil 0) (6 0 24 0 nil 0) (23 0 24 1 nil 0) (21 0 25 0 nil 0) (7 1 27 0 nil 0) (28 0 27 1 nil 0) (7 1 28 0 nil 0) (31 0 29 0 nil 0) (7 0 30 0 nil 0) (29 0 30 1 nil 0) (27 0 31 0 nil 0))) 7.06 nil "" (om-make-point 0 0) (om-make-point 1440 553)) (quote nil) (om-make-point 120 181) nil nil nil "2"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 106 26) (quote "EDOs: 5, 6, 7, 8") "" (om-make-point 83 82) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "1" (om-load-patch-abs1 "1" (quote ((let ((box (om-load-boxcomment "comment 3" (om-make-point 60 32) (quote "7 EDO") "" (om-make-point 879 44) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 8))) (om-make-point 1136 66) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 7))) (om-make-point 786 64) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 6))) (om-make-point 432 75) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEN-EDO-SCALE" (quote gen-edo-scale) (quote ((om-load-inputfun (quote input-funbox) "division" "EDO" 5))) (om-make-point 68 77) nil (list (list 6000 6240 6480 6720 6960 7200)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1110 128) (om-make-point 291 103) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6150) (6300) (6450) (6600) (6750) (6900) (7050) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 5000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "150" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "300" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "450" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "600" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "750" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "900" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1050" :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil nil nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 819 423) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 80.0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 760 124) (om-make-point 291 103) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6171) (6343) (6514) (6686) (6857) (7029) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4500)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "171" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "343" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "514" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "686" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "857" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1029" :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil nil nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 810 453) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 70)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 406 128) (om-make-point 291 103) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6200) (6400) (6600) (6800) (7000) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 4000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "200" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "400" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "600" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "800" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1000" :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil nil nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 833 556) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 1)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 42 131) (om-make-point 291 103) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6240) (6480) (6720) (6960) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3500)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "0" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "240" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "480" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "720" :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "960" :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay 3 :thetext "1200" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil nil nil (quote t) (quote :normal) 1 2 (om-make-point 0 0) (om-make-point 833 556) 0 1000 nil 6/5 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) 1.25) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) t) newobj) (quote g) 24 50.0)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 60 32) (quote "8 EDO") "" (om-make-point 1233 48) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 4" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 1250 292) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN 4" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 1269 232) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING 4" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 1133 342) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT 4" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 1123 382) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 4" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 1149 280) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 3" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 898 293) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN 3" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 917 232) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING 3" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 783 354) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT 3" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 773 402) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 799 282) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 60 32) (quote "6 EDO") "" (om-make-point 525 44) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 538 293) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 559 232) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING 2" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 429 344) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT 2" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 419 382) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 445 281) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 60 32) (quote "5 EDO") "" (om-make-point 148 49) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 152 300) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN 2" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 176 240) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKSTRING" (quote mkstring) (quote ((om-load-inputfun (quote input-funbox) "" "LISTE" nil))) (om-make-point 65 363) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PUT-EXTRA-TEXT" (quote put-extra-text) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "list-of-extras" "LISTE" (list 0 1)) (om-load-inputkeyword (quote input-keyword) "delta y" "deltay" (quote :deltay) (quote down) (list (list "  up" (quote up)) (list "> down" (quote down)))) (om-load-inputkeyword (quote input-keyword) "positions" "positions" (quote :positions) nil nil))) (om-make-point 55 402) (om-make-point 83 58) nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 81 307) nil nil "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 5 1 nil 0) (2 0 6 1 nil 0) (3 0 7 1 nil 0) (4 0 8 1 nil 0) (5 1 10 0 nil 0) (11 0 10 1 nil 0) (5 1 11 0 nil 0) (14 0 12 0 nil 0) (5 0 13 0 nil 0) (12 0 13 1 nil 0) (10 0 14 0 nil 0) (6 1 15 0 nil 0) (16 0 15 1 nil 0) (6 1 16 0 nil 0) (19 0 17 0 nil 0) (6 0 18 0 nil 0) (17 0 18 1 nil 0) (15 0 19 0 nil 0) (7 1 21 0 nil 0) (22 0 21 1 nil 0) (7 1 22 0 nil 0) (25 0 23 0 nil 0) (7 0 24 0 nil 0) (23 0 24 1 nil 0) (21 0 25 0 nil 0) (8 1 27 0 nil 0) (28 0 27 1 nil 0) (8 1 28 0 nil 0) (31 0 29 0 nil 0) (8 0 30 0 nil 0) (29 0 30 1 nil 0) (27 0 31 0 nil 0))) 7.06 nil "" (om-make-point 0 0) (om-make-point 1459 483)) (quote nil) (om-make-point 122 94) nil nil nil "1"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 334 32) (quote "TUTORIAL: 'TUNING AND NOTATION' MENU") "" (om-make-point 71 14) nil (om-make-color 0 0 0) (om-make-font "Verdana" 15 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) nil 7.06))

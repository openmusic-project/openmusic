; OM File Header - Saved 2024/10/19 17:58:15
; (7.05 :patc (om-make-point 92 12) (om-make-point 0 0) (om-make-point 1017 802) "No documentation " 183 0 nil "2024/10/19 17:58:15")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "01-fluid" (quote ((let ((box (om-load-editor-box1 "FL-PAN" (quote fl-pan) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :horizontal) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list 0 127)) (om-load-inputfun (quote input-funbox) "step" "increment" 1) (om-load-inputfun (quote input-funbox) "fl-pan value" "value" 64) (om-load-inputfun (quote input-funbox) "channel(s)" "channel" nil) (om-load-inputfun (quote input-funbox) "port number" "port" nil))) (om-make-point 851 552) (om-make-point 130 74) (let ((rep (om-make-dialog-item (quote fl-pan) (om-make-point 1 1) (om-make-point 114 24) "untitled" :direction :horizontal :range (quote (0 127)) :increment 1 :value 71))) rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "FL-GAIN" (quote fl-gain) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :horizontal) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list 0 127)) (om-load-inputfun (quote input-funbox) "step" "increment" 1) (om-load-inputfun (quote input-funbox) "fl-gain value" "value" 64) (om-load-inputfun (quote input-funbox) "port number" "port" nil))) (om-make-point 850 461) (om-make-point 130 74) (let ((rep (om-make-dialog-item (quote fl-gain) (om-make-point 1 1) (om-make-point 114 24) "untitled" :direction :horizontal :range (quote (0 127)) :increment 1 :value 64))) rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "FL-PGM" (quote fl-pgm) (quote ((om-load-inputfun (quote input-funbox) "PGM" "items" (quote pgms)) (om-load-inputfun (quote input-funbox) "Channel" "channel" nil) (om-load-inputfun (quote input-funbox) "Port" "port" nil))) (om-make-point 692 543) (om-make-point 130 74) (let ((rep (om-make-dialog-item (quote fl-pgm) (om-make-point 1 0) (om-make-point 110 24) "untitled" :range (quote ("Piano Merlin 2A" "Piano Merlin 2B" "Elec Piano - SC88" "Honky Tonk" "Rhodes Piano" "Chorused Piano" "Coupled Harpsichord" "Clavinet" "Celesta" "Glockenspiel" "Music Box" "Vibraphone (Syn)" "Marimba" "Xylophone" "Tubular Bells" "Dulcimer" "Hammond Organ" "Percussive Organ" "Rock Organ" "Church Organ LP" "Reed Organ" "Accordion" "Harmonica" "Bandoneon" "Guitar Nylon X" "Steel 12-str. Gt" "Jazz Guitar" "Clean Guitar" "Guitar Mutes" "Overdrive Guitar" "DistortionGuitar" "Guitar Harmonics" "Acoustic Bass" "Fingered Bass" "Picked Bass" "Fretless Bass" "Slap Bass 1" "Slap Bass 2" "Synth Bass 1" "Synth Bass 2" "Violin X3" "Viola LP" "Cello LP" "Contrabass" "Tremolo Strings" "Pizzicato Strings" "Harp LP2" "Timpani Creative" "String CX" "Strings Slow CX" "Synth Strings" "Synth Str 8M2" "Choir Aahs" "Voices LP" "Synth Vox" "Orchestra Hit" "Trumpet A" "Trombone A" "Tuba II" "Mute Trumpet" "French Horns" "Brass" "Synth Brass 1" "Synth Brass 2" "Soprano Sax" "Alto SAX" "Tenor Sax (TB)" "Baritone Sax" "Oboe" "English Horn Real" "Bassoon" "Clarinet" "Piccolo" "Flute Gold" "Recorder" "Pan Flute" "Bottle Chiff" "Shakuhachi (Syn)" "Whistle" "Ocarina" "Square Wave" "Saw Wave" "Synth Calliope" "Chiffer Lead" "Charang" "Solo Vox" "5th Saw Wave" "Bass & Lead" "Fantasia" "Warm Pad" "Poly Synth" "Space Voice" "Bowed Glass" "Metal Pad" "Halo Pad" "Sweep Pad" "Ice Rain" "Soundtrack" "Crystal" "Atmosphere" "Brightness" "Goblin" "Echo Drops" "Star Theme" "SITAR" "Banjo (Syn)" "Shamisen" "Koto" "Kalimba" "Bagpipe" "Fiddle" "Shenai" "Tinker Bell" "Agogo" "Steel Drum" "Wood Block" "Taiko Drum" "Melodic Tom (Uni)" "Synth Drum" "Reverse Cymbal" "Fret Noise" "Breath Noise" "Seashore" "Bird" "Telephone" "Helicopter" "Applause" "Gun Shot"))))) (om-set-selected-item-index rep (quote 0)) rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "FL-MICROTUNE" (quote fl-microtune) (quote ((om-load-inputfun (quote input-funbox) "Tunings" "items" (quote *edo-names-0*)) (om-load-inputfun (quote input-funbox) "Port" "port" nil))) (om-make-point 691 463) (om-make-point 130 74) (let ((rep (om-make-dialog-item (quote fl-microtune) (om-make-point 1 0) (om-make-point 110 24) "untitled" :range (quote ("5 edo" "6 edo (1)" "7 edo" "8 edo" "9 edo" "10 edo" "12 edo (1/2)" "14 edo" "15 edo" "16 edo" "17 edo" "18 edo (1/3)" "19 edo" "22 edo" "24 edo (1/4)" "30 edo (1/5)" "31 edo" "36 edo (1/6)" "42 edo (1/7)" "48 edo (1/8)" "60 edo (1/10)" "72 edo (1/12)" "84 edo (1/14)" "96 edo (1/16)"))))) (om-set-selected-item-index rep (quote 0)) rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "FLUID-SYNTH-CONSOLE 2" (quote fluid-synth-console) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "output port number" "midiport" nil) (om-load-inputfun (quote input-funbox) "number of tracks" "nbtracks" 8))) (om-make-point 490 559) (om-make-point 65 70) (when (find-class (quote fluid-synth-console) nil) (let ((rep (make-instance (quote fluid-synth-console) :midiport nil :nbtracks 8))) (setf (channels-ctrl rep) (list (if (find-class (quote fluid-ctrl) nil) (make-instance (quote fluid-ctrl) :midiport 0 :midichannel (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16) :program (list 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11) :prg-main (quote t) :pan-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :control1-num (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) :control2-num (list 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) :control1-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :control2-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :gain-ctrl 82 :vol-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :pitch-ctrl 8192 :tuning 8 :rev-on nil :room-ctrl 80 :damp-ctrl 20 :width-ctrl 20 :rlevel-ctrl 88 :ch-on nil :nr-ctrl 20 :clevel-ctrl 20 :speed-ctrl 20 :depth-ctrl 20 :ch-type-ctrl 0 :i-chans nil :from-file t)) (if (find-class (quote fluid-ctrl) nil) (make-instance (quote fluid-ctrl) :midiport 1 :midichannel (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16) :program (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :prg-main (quote t) :pan-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :control1-num (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) :control2-num (list 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) :control1-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :control2-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :gain-ctrl 32 :vol-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :pitch-ctrl 8192 :tuning 2 :rev-on nil :room-ctrl 20 :damp-ctrl 20 :width-ctrl 20 :rlevel-ctrl 20 :ch-on nil :nr-ctrl 20 :clevel-ctrl 20 :speed-ctrl 20 :depth-ctrl 20 :ch-type-ctrl 0 :i-chans nil :from-file t)) (if (find-class (quote fluid-ctrl) nil) (make-instance (quote fluid-ctrl) :midiport 2 :midichannel (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16) :program (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :prg-main (quote t) :pan-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :control1-num (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) :control2-num (list 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) :control1-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :control2-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :gain-ctrl 32 :vol-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :pitch-ctrl 8192 :tuning 2 :rev-on nil :room-ctrl 20 :damp-ctrl 20 :width-ctrl 20 :rlevel-ctrl 20 :ch-on nil :nr-ctrl 20 :clevel-ctrl 20 :speed-ctrl 20 :depth-ctrl 20 :ch-type-ctrl 0 :i-chans nil :from-file t)) (if (find-class (quote fluid-ctrl) nil) (make-instance (quote fluid-ctrl) :midiport 3 :midichannel (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16) :program (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :prg-main (quote t) :pan-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :control1-num (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) :control2-num (list 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) :control1-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :control2-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :gain-ctrl 32 :vol-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :pitch-ctrl 8192 :tuning 2 :rev-on nil :room-ctrl 20 :damp-ctrl 20 :width-ctrl 20 :rlevel-ctrl 20 :ch-on nil :nr-ctrl 20 :clevel-ctrl 20 :speed-ctrl 20 :depth-ctrl 20 :ch-type-ctrl 0 :i-chans nil :from-file t)) (if (find-class (quote fluid-ctrl) nil) (make-instance (quote fluid-ctrl) :midiport 4 :midichannel (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16) :program (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :prg-main (quote t) :pan-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :control1-num (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) :control2-num (list 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) :control1-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :control2-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :gain-ctrl 32 :vol-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :pitch-ctrl 8192 :tuning 2 :rev-on nil :room-ctrl 20 :damp-ctrl 20 :width-ctrl 20 :rlevel-ctrl 20 :ch-on nil :nr-ctrl 20 :clevel-ctrl 20 :speed-ctrl 20 :depth-ctrl 20 :ch-type-ctrl 0 :i-chans nil :from-file t)) (if (find-class (quote fluid-ctrl) nil) (make-instance (quote fluid-ctrl) :midiport 5 :midichannel (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16) :program (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :prg-main (quote t) :pan-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :control1-num (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) :control2-num (list 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) :control1-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :control2-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :gain-ctrl 32 :vol-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :pitch-ctrl 8192 :tuning 2 :rev-on nil :room-ctrl 20 :damp-ctrl 20 :width-ctrl 20 :rlevel-ctrl 20 :ch-on nil :nr-ctrl 20 :clevel-ctrl 20 :speed-ctrl 20 :depth-ctrl 20 :ch-type-ctrl 0 :i-chans nil :from-file t)) (if (find-class (quote fluid-ctrl) nil) (make-instance (quote fluid-ctrl) :midiport 6 :midichannel (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16) :program (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :prg-main (quote t) :pan-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :control1-num (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) :control2-num (list 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) :control1-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :control2-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :gain-ctrl 32 :vol-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :pitch-ctrl 8192 :tuning 2 :rev-on nil :room-ctrl 20 :damp-ctrl 20 :width-ctrl 20 :rlevel-ctrl 20 :ch-on nil :nr-ctrl 20 :clevel-ctrl 20 :speed-ctrl 20 :depth-ctrl 20 :ch-type-ctrl 0 :i-chans nil :from-file t)) (if (find-class (quote fluid-ctrl) nil) (make-instance (quote fluid-ctrl) :midiport 7 :midichannel (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16) :program (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :prg-main (quote t) :pan-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :control1-num (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) :control2-num (list 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) :control1-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :control2-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :gain-ctrl 32 :vol-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :pitch-ctrl 8192 :tuning 2 :rev-on nil :room-ctrl 20 :damp-ctrl 20 :width-ctrl 20 :rlevel-ctrl 20 :ch-on nil :nr-ctrl 20 :clevel-ctrl 20 :speed-ctrl 20 :depth-ctrl 20 :ch-type-ctrl 0 :i-chans nil :from-file t)))) (setf (miditrack rep) (quote 0)) rep)) "x" nil (pairlis (quote (measure onset scale show-stems mode grillestep notechancolor? cmnpref obj-mode zoom deltapict winsize winpos player)) (list nil nil nil (quote t) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (om-make-point 960 760) (om-make-point 0 0) (quote :midi-player))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "FLUID-MIX-CONSOLE" (quote fluid-mix-console) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "output port number" "midiport" nil) (om-load-inputfun (quote input-funbox) "number of tracks" "nbtracks" 16) (om-load-inputfun (quote input-funbox) "output port number" "port" 0) (om-load-inputfun (quote input-funbox) "" "current-preset" 0))) (om-make-point 796 352) (om-make-point 65 70) (when (find-class (quote fluid-mix-console) nil) (let ((rep (make-instance (quote fluid-mix-console) :midiport 0 :nbtracks 16 :port 0))) (setf (channels-ctrl rep) (list (if (find-class (quote fluid-chan-ctrl) nil) (make-instance (quote fluid-chan-ctrl) :nfsynth 0 :midiport 0 :midichannel 1 :program 0 :pan-ctrl 64 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 32 :pitch-ctrl 8192 :tuning 2 :from-file t)) (if (find-class (quote fluid-chan-ctrl) nil) (make-instance (quote fluid-chan-ctrl) :nfsynth 0 :midiport 0 :midichannel 2 :program 0 :pan-ctrl 64 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 32 :pitch-ctrl 8192 :tuning 2 :from-file t)) (if (find-class (quote fluid-chan-ctrl) nil) (make-instance (quote fluid-chan-ctrl) :nfsynth 0 :midiport 0 :midichannel 3 :program 0 :pan-ctrl 64 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 32 :pitch-ctrl 8192 :tuning 2 :from-file t)) (if (find-class (quote fluid-chan-ctrl) nil) (make-instance (quote fluid-chan-ctrl) :nfsynth 0 :midiport 0 :midichannel 4 :program 0 :pan-ctrl 64 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 32 :pitch-ctrl 8192 :tuning 2 :from-file t)) (if (find-class (quote fluid-chan-ctrl) nil) (make-instance (quote fluid-chan-ctrl) :nfsynth 0 :midiport 0 :midichannel 5 :program 0 :pan-ctrl 64 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 32 :pitch-ctrl 8192 :tuning 2 :from-file t)) (if (find-class (quote fluid-chan-ctrl) nil) (make-instance (quote fluid-chan-ctrl) :nfsynth 0 :midiport 0 :midichannel 6 :program 0 :pan-ctrl 64 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 32 :pitch-ctrl 8192 :tuning 2 :from-file t)) (if (find-class (quote fluid-chan-ctrl) nil) (make-instance (quote fluid-chan-ctrl) :nfsynth 0 :midiport 0 :midichannel 7 :program 0 :pan-ctrl 64 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 32 :pitch-ctrl 8192 :tuning 2 :from-file t)) (if (find-class (quote fluid-chan-ctrl) nil) (make-instance (quote fluid-chan-ctrl) :nfsynth 0 :midiport 0 :midichannel 8 :program 0 :pan-ctrl 64 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 32 :pitch-ctrl 8192 :tuning 2 :from-file t)) (if (find-class (quote fluid-chan-ctrl) nil) (make-instance (quote fluid-chan-ctrl) :nfsynth 0 :midiport 0 :midichannel 9 :program 0 :pan-ctrl 64 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 32 :pitch-ctrl 8192 :tuning 2 :from-file t)) (if (find-class (quote fluid-chan-ctrl) nil) (make-instance (quote fluid-chan-ctrl) :nfsynth 0 :midiport 0 :midichannel 10 :program 0 :pan-ctrl 64 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 32 :pitch-ctrl 8192 :tuning 2 :from-file t)) (if (find-class (quote fluid-chan-ctrl) nil) (make-instance (quote fluid-chan-ctrl) :nfsynth 0 :midiport 0 :midichannel 11 :program 0 :pan-ctrl 64 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 32 :pitch-ctrl 8192 :tuning 2 :from-file t)) (if (find-class (quote fluid-chan-ctrl) nil) (make-instance (quote fluid-chan-ctrl) :nfsynth 0 :midiport 0 :midichannel 12 :program 0 :pan-ctrl 64 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 32 :pitch-ctrl 8192 :tuning 2 :from-file t)) (if (find-class (quote fluid-chan-ctrl) nil) (make-instance (quote fluid-chan-ctrl) :nfsynth 0 :midiport 0 :midichannel 13 :program 0 :pan-ctrl 64 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 32 :pitch-ctrl 8192 :tuning 2 :from-file t)) (if (find-class (quote fluid-chan-ctrl) nil) (make-instance (quote fluid-chan-ctrl) :nfsynth 0 :midiport 0 :midichannel 14 :program 0 :pan-ctrl 64 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 32 :pitch-ctrl 8192 :tuning 2 :from-file t)) (if (find-class (quote fluid-chan-ctrl) nil) (make-instance (quote fluid-chan-ctrl) :nfsynth 0 :midiport 0 :midichannel 15 :program 0 :pan-ctrl 64 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 32 :pitch-ctrl 8192 :tuning 2 :from-file t)) (if (find-class (quote fluid-chan-ctrl) nil) (make-instance (quote fluid-chan-ctrl) :nfsynth 0 :midiport 0 :midichannel 16 :program 0 :pan-ctrl 64 :control1-num 1 :control2-num 2 :control1-val 0 :control2-val 0 :vol-ctrl 32 :pitch-ctrl 8192 :tuning 2 :from-file t)))) (setf (miditrack rep) (quote 0)) (setf (presets rep) (quote (("-----" nil)))) rep)) nil nil (pairlis (quote (measure onset player winpos winsize deltapict zoom obj-mode cmnpref notechancolor? grillestep mode show-stems scale)) (list nil nil (quote :fluidsynth) (om-make-point 0 0) (om-make-point 1284 605) (om-make-point 0 0) 1 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (quote t) nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "FLUID-SYNTH-CONSOLE" (quote fluid-synth-console) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "output port number" "midiport" nil) (om-load-inputfun (quote input-funbox) "number of tracks" "nbtracks" 4))) (om-make-point 704 353) (om-make-point 65 70) (when (find-class (quote fluid-synth-console) nil) (let ((rep (make-instance (quote fluid-synth-console) :midiport nil :nbtracks 4))) (setf (channels-ctrl rep) (list (if (find-class (quote fluid-ctrl) nil) (make-instance (quote fluid-ctrl) :midiport 0 :midichannel (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16) :program (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :prg-main (quote t) :pan-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :control1-num (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) :control2-num (list 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) :control1-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :control2-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :gain-ctrl 97 :vol-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :pitch-ctrl 8192 :tuning 2 :rev-on nil :room-ctrl 20 :damp-ctrl 20 :width-ctrl 20 :rlevel-ctrl 20 :ch-on nil :nr-ctrl 20 :clevel-ctrl 20 :speed-ctrl 20 :depth-ctrl 20 :ch-type-ctrl 0 :i-chans nil :from-file t)) (if (find-class (quote fluid-ctrl) nil) (make-instance (quote fluid-ctrl) :midiport 1 :midichannel (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16) :program (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :prg-main (quote t) :pan-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :control1-num (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) :control2-num (list 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) :control1-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :control2-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :gain-ctrl 32 :vol-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :pitch-ctrl 8192 :tuning 2 :rev-on nil :room-ctrl 20 :damp-ctrl 20 :width-ctrl 20 :rlevel-ctrl 20 :ch-on nil :nr-ctrl 20 :clevel-ctrl 20 :speed-ctrl 20 :depth-ctrl 20 :ch-type-ctrl 0 :i-chans nil :from-file t)) (if (find-class (quote fluid-ctrl) nil) (make-instance (quote fluid-ctrl) :midiport 2 :midichannel (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16) :program (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :prg-main (quote t) :pan-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :control1-num (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) :control2-num (list 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) :control1-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :control2-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :gain-ctrl 32 :vol-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :pitch-ctrl 8192 :tuning 2 :rev-on nil :room-ctrl 20 :damp-ctrl 20 :width-ctrl 20 :rlevel-ctrl 20 :ch-on nil :nr-ctrl 20 :clevel-ctrl 20 :speed-ctrl 20 :depth-ctrl 20 :ch-type-ctrl 0 :i-chans nil :from-file t)) (if (find-class (quote fluid-ctrl) nil) (make-instance (quote fluid-ctrl) :midiport 3 :midichannel (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16) :program (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :prg-main (quote t) :pan-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :control1-num (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1) :control2-num (list 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) :control1-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :control2-val (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) :gain-ctrl 32 :vol-ctrl (list 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64 64) :pitch-ctrl 8192 :tuning 2 :rev-on nil :room-ctrl 20 :damp-ctrl 20 :width-ctrl 20 :rlevel-ctrl 20 :ch-on nil :nr-ctrl 20 :clevel-ctrl 20 :speed-ctrl 20 :depth-ctrl 20 :ch-type-ctrl 0 :i-chans nil :from-file t)))) (setf (miditrack rep) (quote 0)) rep)) nil nil (pairlis (quote (measure onset player winpos winsize deltapict zoom obj-mode cmnpref notechancolor? grillestep mode show-stems scale)) (list nil nil (quote :midi-player) (om-make-point 0 0) (om-make-point 480 760) (om-make-point 0 0) 1 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (quote t) nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLUID-PITCHWHEEL" (quote fluid-pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "" "VALS" nil) (om-load-inputfun (quote input-funbox) "" "CHANS" nil))) (om-make-point 818 170) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLUID-PGMOUT" (quote fluid-pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROGM" 2) (om-load-inputfun (quote input-funbox) "MIDI channel(s)" "CHANS" 1))) (om-make-point 649 168) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLUID-PAN" (quote fluid-pan) (quote ((om-load-inputfun (quote input-funbox) "vals" "VALS" 64) (om-load-inputfun (quote input-funbox) "chans" "CHANS" 1))) (om-make-point 903 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLUID-PGM-CHANGE" (quote fluid-pgm-change) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROGM" 2) (om-load-inputfun (quote input-funbox) "MIDI channel(s)" "CHANS" 1) (om-load-inputkeyword (quote input-keyword) "port" "port" (quote :port) 0 nil))) (om-make-point 718 168) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLUID-CHORUS" (quote fluid-chorus) (quote ((om-load-inputfun (quote input-funbox) "nr" "NR" 3) (om-load-inputfun (quote input-funbox) "level" "LEVEL" 2.0) (om-load-inputfun (quote input-funbox) "speed" "SPEED" 0.3) (om-load-inputfun (quote input-funbox) "depth" "DEPTH" 8.0) (om-load-inputfun (quote input-funbox) "type" "TYPE" 0))) (om-make-point 758 259) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLUID-GAIN" (quote fluid-gain) (quote ((om-load-inputfun (quote input-funbox) "vals" "VALS" 100) (om-load-inputfun (quote input-funbox) "chans" "CHANS" 0))) (om-make-point 619 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLUID-VOLUME" (quote fluid-volume) (quote ((om-load-inputfun (quote input-funbox) "vals" "VALS" 100) (om-load-inputfun (quote input-funbox) "chans" "CHANS" 1) (om-load-inputfun (quote input-funbox) "chans" "PORT" 1))) (om-make-point 829 256) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 504 219) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 163 120) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLUID-REVERB" (quote fluid-reverb) (quote ((om-load-inputfun (quote input-funbox) "roomsize" "ROOMSIZE" 2.0) (om-load-inputfun (quote input-funbox) "damping" "DAMPING" 0.0) (om-load-inputfun (quote input-funbox) "width" "WIDTH" 0.5) (om-load-inputfun (quote input-funbox) "level" "LEVEL" 2.9) (om-load-inputfun (quote input-funbox) "port" "PORT" 0))) (om-make-point 687 259) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 389 507) (om-make-point 61 28) (list 0 0 0 0) "(0 0 0 0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 271 508) (om-make-point 105 28) (list 0 1024 2048 3072) "(0 1024 2048 3072)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 346 474) (om-make-point 70 30) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLUID-PITCHWHEEL" (quote fluid-pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "" "VALS" nil) (om-load-inputfun (quote input-funbox) "" "CHANS" nil))) (om-make-point 382 563) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLUID-PITCHWHEEL" (quote fluid-pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "" "VALS" nil) (om-load-inputfun (quote input-funbox) "" "CHANS" nil))) (om-make-point 298 563) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 465 144) (om-make-point 32 28) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 432 144) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 437 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLUID-PGMOUT" (quote fluid-pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROGM" 2) (om-load-inputfun (quote input-funbox) "MIDI channel(s)" "CHANS" 1) (om-load-inputfun (quote input-funbox) "MIDI channel(s)" "PORT" nil))) (om-make-point 447 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLUID-PGMOUT" (quote fluid-pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROGM" 2) (om-load-inputfun (quote input-funbox) "MIDI channel(s)" "CHANS" 1) (om-load-inputfun (quote input-funbox) "MIDI channel(s)" "PORT" nil))) (om-make-point 119 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1112" (om-make-point 146 34) (quote "FLUIDSYNTH Objects ") "" (om-make-point 453 23) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment111111" (om-make-point 22 20) (quote "E") "" (om-make-point 42 233) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment111" (om-make-point 22 20) (quote "F") "" (om-make-point 77 349) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 22 20) (quote "B") "" (om-make-point 324 66) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 22 20) (quote "A") "" (om-make-point 119 69) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 180 276) (om-make-point 57 25) (list 0 250) "(0 250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 68 229) (om-make-point 214 42) (list 6000 7100 5300 6300 4500 8000 7300 6800 6700 6200 6600 4000) "(6000 7100 5300 6300 4500 8000 7300 6800 6700 6200 6600 4000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 344 277) (om-make-point 33 24) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 111 297) (om-make-point 276 117) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (7100) (5300) (6300) (4500) (8000) (7300) (6800) (6700) (6200) (6600) (4000))) :lonset (quote (0 250 500 750 1000 1250 1500 1750 2000 2250 2500 2750 3000)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (2) (3) (4) (5) (6) (7) (8) (9) (11) (12) (13))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.05 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset score-mode cursor-mode player winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport palette-mode obj-mode show-stems scale)) (list nil nil 0 (quote :normal) (quote :fluidsynth) (om-make-point 0 0) (om-make-point 1088 448) 0 1000 nil 1 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 0 0 (quote t) nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 250 92) (om-make-point 159 27) (list 1 2 3 4 5 6 7 8 9 11 12 13) "(1 2 3 4 5 6 7 8 9 11 12 13)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 16 92) (om-make-point 208 29) (list 1 30 72 76 54 89 45 12 36 65 55 47) "(1 30 72 76 54 89 45 12 36 65 55 47)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux8" (quote t) (quote nil) (om-make-point 54 564) (om-make-point 48 30) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 96 604) (om-make-point 26 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 102 501) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 121 501) (om-make-point 41 30) 200 "200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 147 501) (om-make-point 34 30) 25 "25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 105 541) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 233 644) (om-make-point 29 23) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 120 641) (om-make-point 55 28) (list 0 500) "(0 500)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 61 669) (om-make-point 210 98) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6025) (6050) (6075) (6100) (6125) (6150) (6175) (6200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500)) :ldur (quote ((500) (500) (500) (500) (500) (500) (500) (500) (500))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.05 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset score-mode cursor-mode player winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode show-stems scale)) (list nil nil 0 (quote :normal) (quote :fluidsynth) (om-make-point 0 0) (om-make-point 843 405) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8 0 0 (quote t) nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((17 0 20 0 nil 0) (19 0 20 1 nil 0) (18 0 21 0 nil 0) (19 0 21 1 nil 0) (23 0 24 0 nil 0) (22 0 24 1 nil 0) (24 0 25 0 nil 0) (36 0 25 1 nil 0) (14 0 25 2 nil 0) (37 0 26 0 nil 0) (36 0 26 1 nil 0) (15 0 26 2 nil 0) (33 0 35 1 nil 0) (32 0 35 2 nil 0) (36 0 35 6 nil 0) (34 0 35 7 nil 0) (38 0 39 0 nil 0) (43 0 39 1 nil 0) (40 0 43 0 nil 0) (41 0 43 1 nil 0) (42 0 43 2 nil 0) (39 0 46 1 nil 0) (45 0 46 2 nil 0) (44 0 46 7 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name nil :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict nil :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs (list (list (quote line) (list 5/67 117/235 317/335 114/235) (list (om-make-color 0.9306569 0.0 0.0) 4 (quote line) nil) nil))))) (setf (pict-pos newpict) (om-make-point 26 428)) (setf (pict-size newpict) (om-make-point 500 4)) newpict)) 7.05))

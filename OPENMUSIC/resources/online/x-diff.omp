; OM File Header - Saved 2021/07/13 18:34:01
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 555 576) "" 183 0 nil "2021/07/13 18:33:55")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "x-diff" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 260 495) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 21) "(7)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 42 494) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 20) "(1 5 1)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 254 138) (quote "INPUTS:$l1?   list$l2?   list$OPTIONAL INPUTS:$test     symbol, function or Lambda-function$key     symbol, function or Lambda-function$list       other lists$OUTPUT:$returns a list with all elements present in l1?  and list  but not in l2?$") "" (om-make-point 176 37) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-DIFF" (quote x-diff) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil))) (om-make-point 311 420) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-DIFF" (quote x-diff) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil))) (om-make-point 93 425) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 325 381) (om-make-point 91 30) (list 1 2 4 5 4 2 1) "(1 2 4 5 4 2 1) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 263 382) (om-make-point 55 30) (list 2 4 7) "( 2 4 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 131 382) (om-make-point 55 30) (list 2 4 7) "( 2 4 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 31 383) (om-make-point 91 30) (list 1 2 4 5 4 2 1) "(1 2 4 5 4 2 1) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 405 142) (quote "This function compares< l1?> to <l2?> and then returns all elements present in <l1?> but not in <l2?>, as a list. If the optional <test> argument is added (remember that this module might be extended) , the lists can be compared according to any  predicate ( the default value of <test> being 'equal). Only elements in< l1?> that return true when compared with all the elements in < l2?> (according to the predicate), are returned in the result list. If the key argument  is included (the default function is identity), its function is first evaluated using each of < l1?> elements as input, and then the lists are compared according to the test on the results of the function. <test> and <key> may also be connected function or subpatch icons in 'lambda' mode. Additional lists can be compared using <list>.$Beware that this operation is not commutative. $") "" (om-make-point 35 196) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 156 30) (quote "x-diff") "" (om-make-point 194 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 18.666666666666665D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (4 0 1 0 nil 0) (6 0 3 0 nil 0) (5 0 3 1 nil 0) (8 0 4 0 nil 0) (7 0 4 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 41 61)) (setf (pict-size newpict) (om-make-point 126 115)) newpict)) 6.2))

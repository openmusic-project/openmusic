; OM File Header - Saved 2021/07/13 16:49:39
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 539 506) "" 183 0 nil "2021/07/13 16:49:39")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "permutations" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 121 337) (om-make-point 247 43) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 219 23) "((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1))" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 151 97) (quote "INPUT:$bag      list$OUTPUT:$return a list of all the permutations of the input.$") "" (om-make-point 199 79) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUTATIONS" (quote permutations) (quote ((om-load-inputfun (quote input-funbox) "a list" "BAG" nil))) (om-make-point 212 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 310 99) (quote "Note: permutations being a recursive function, one must be carefull not to use big lists which will cause an "out of memory" error.$") "" (om-make-point 102 389) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 211 230) (om-make-point 77 31) (list 1 2 3) "(1 2 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 366 48) (quote "The permutations module returns all possible permutations from <bag>.") "" (om-make-point 97 183) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 156 30) (quote "permutations") "" (om-make-point 183 17) nil (om-make-color 0 0 0) (om-make-font "Arial" 18.666666666666665D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (4 0 2 0 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 86 83)) (setf (pict-size newpict) (om-make-point 100 90)) newpict)) 6.2))

; OM File Header - Saved 2021/07/13 15:06:06
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 550 667) "" 183 0 nil "2021/07/13 15:06:06")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "included" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX 3" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 186 569) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 21) "t" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 257 400) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 21) "nil" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 99 400) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 20) "t" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 202 120) (quote "INPUTS:$lst1    list$lst2    list$OPTIONAL INPUT:$test    symbol $OUTPUT:$returns true if all of the elements of lst1   $are also elements of lst2.  $Otherwise, it returns nil$") "" (om-make-point 194 29) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 300 450) (om-make-point 26 30) (quote >) ">" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 220 450) (om-make-point 70 30) (list 2 4 1 5 3) "(2 4 1 5 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 144 450) (om-make-point 69 30) (list 10 11 12) "(10 11 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INCLUDED?" (quote included?) (quote ((om-load-inputfun (quote input-funbox) "first list" "LST1" nil) (om-load-inputfun (quote input-funbox) "second list" "LST2" nil) (om-load-inputfun (quote input-funbox) "test" "TEST" (quote equal)))) (om-make-point 181 493) (om-make-point 144 55) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INCLUDED?" (quote included?) (quote ((om-load-inputfun (quote input-funbox) "first list" "LST1" nil) (om-load-inputfun (quote input-funbox) "second list" "LST2" nil))) (om-make-point 298 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 251 275) (om-make-point 79 30) (list 1 2 3 4 5 6) "(1 2 3 4 5 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 337 275) (om-make-point 70 30) (list 2 4 1 5 3) "(2 4 1 5 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 172 275) (om-make-point 70 30) (list 2 4 1 5 3) "(2 4 1 5 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 95 275) (om-make-point 70 30) (list 1 2 3 4 5) "(1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INCLUDED?" (quote included?) (quote ((om-load-inputfun (quote input-funbox) "first list" "LST1" nil) (om-load-inputfun (quote input-funbox) "second list" "LST2" nil))) (om-make-point 140 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 415 84) (quote "This function compares two lists, returning true if all the elements in the first are also elements of the second. If the optional <test> argument is added (the default value is 'equal), the lists are compared globally according to any predicate. For example, if the predicate is '>, the module returns true if all elements in the first l i s t <lst1> are greater than at least one element in the second . ") "" (om-make-point 79 176) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 156 30) (quote "included?") "" (om-make-point 194 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 16.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (8 0 1 0 nil 0) (13 0 2 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (4 0 7 2 nil 0) (9 0 8 0 nil 0) (10 0 8 1 nil 0) (12 0 13 0 nil 0) (11 0 13 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 58 47)) (setf (pict-size newpict) (om-make-point 98 82)) newpict)) 6.2))

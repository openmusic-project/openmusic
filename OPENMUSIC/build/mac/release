#!/bin/bash

# 32bits:
# LWARCH=32-bit
# LWEXEC=lispworks-7-0-0-x86-darwin

# LWARCH=64-bit
# LWVERSION=7.1
# LWEXEC=lispworks-7-1-0-amd64-darwin

LWARCH=64-bit
LWVERSION=8.0
LWEXEC=lispworks-8-0-0-macos64-universal


OM_VERSION="8.0"
APP_FOLDER="OM 8.0"
DMG_NAME="OM-8.0-macOS"


get_abs_filename() {
  # $1 : relative filename
  filename=$1
  parentdir=$(dirname "${filename}")

  if [ -d "${filename}" ]; then
      echo "$(cd "${filename}" && pwd)"
  elif [ -d "${parentdir}" ]; then
    echo "$(cd "${parentdir}" && pwd)/$(basename "${filename}")"
  fi
}


LIBS_SOURCE_FOLDER="$(get_abs_filename "../")"
#LIBS_FOLDER="$(get_abs_filename "../../om-libs-forum/")"
LIBS_RELEASE_FOLDER="$(get_abs_filename "../OM-LIBRARIES-RELEASE/")"
# => /Users/bresson/SRC/omlibraries/


deliver_app()
{
echo "***************************************************"
echo "COMPILING STANDALONE EXE"
echo "***************************************************"

	rm -rf ./OPENMUSIC/*.app/
	/Applications/LispWorks\ $LWVERSION\ \($LWARCH\)/LispWorks\ \($LWARCH\).app/Contents/MacOS/$LWEXEC -build ./OPENMUSIC/build/deliver.lisp

echo "=> DELIVER: DONE"
}


# deliver_app MUST have been called before..
pack_app()
{
echo "***************************************************"
echo "Packing $APP_FOLDER"
echo "***************************************************"

	cd ./OPENMUSIC/build/
	/Applications/LispWorks\ $LWVERSION\ \($LWARCH\)/LispWorks\ \($LWARCH\).app/Contents/MacOS/$LWEXEC -build pack-om.lisp
	cd ../..
#	cp "README.md" "$APP_FOLDER"

echo "=> PACK: DONE"
}

# deliver_app MUST have been called before..
pack_lib()
{
echo "***************************************************"
echo "Packing library: name"
echo "***************************************************"

    echo "(setf *lib-name* #P\"$LIBS_SOURCE_FOLDER/$1/\" *release-dir* #P\"$2/\")" > 'lib-name.lisp.tmp'
	cd ./OPENMUSIC/build/
	/Applications/LispWorks\ $LWVERSION\ \($LWARCH\)/LispWorks\ \($LWARCH\).app/Contents/MacOS/$LWEXEC -build pack-library.lisp
	cd ../..
	rm 'lib-name.lisp.tmp'
}


# pack_app MUST have been called before..
set_fonts()
{   
echo "***************************************************"
echo "Setting font resources in $APP_FOLDER"
echo "***************************************************"
   cp "$APP_FOLDER"/"$APP_FOLDER".app/Contents/Resources/fonts/mac/* "$APP_FOLDER"/"$APP_FOLDER".app/Contents/Resources/fonts/
   rm -rf "$APP_FOLDER"/"$APP_FOLDER".app/Contents/Resources/fonts/mac/
   rm -rf "$APP_FOLDER"/"$APP_FOLDER".app/Contents/Resources/fonts/win/
   rm -rf "$APP_FOLDER"/"$APP_FOLDER".app/Contents/Resources/fonts/linux/
	 	   
   cp "$APP_FOLDER"/"$APP_FOLDER".app/Contents/Info.plist .	   
   defaults write $(pwd)/Info.plist ATSApplicationFontsPath -string "fonts/"
   mv ./Info.plist "$APP_FOLDER"/"$APP_FOLDER".app/Contents/Info.plist
   chmod 644 "$APP_FOLDER"/"$APP_FOLDER".app/Contents/Info.plist

echo "=> FONTS: DONE"

}

# pack_app MUST have been called before..
create_simple_dmg()
{
echo "***************************************************"
echo "Preparing DMG distribution for $APP_FOLDER"
echo "***************************************************"

	rm -f $DMG_NAME.dmg	
	#rm -rf _DMG
	#mkdir _DMG
	#cp -R "$APP_FOLDER" _DMG
	#ln -s /Applications/ _DMG/Applications
	#hdiutil create -fs HFS+ -volname $DMG_NAME -srcfolder _DMG $DMG_NAME.dmg
	hdiutil create -fs HFS+ -volname $DMG_NAME -srcfolder "$APP_FOLDER" $DMG_NAME.dmg
	#rm -rf _DMG

echo "=> DMG: DONE"	
}

zip_release()
{
echo "***************************************************"
echo "Preparing ZIP distribution for $APP_FOLDER"
echo "***************************************************"

	rm ./"$DMG_NAME".zip
	zip -r -q -dg ./"$DMG_NAME".zip ./"$APP_FOLDER"/  

echo "=> ZIP: DONE"
}

change_permission()
{
    # this function change the permission for a given folder
    # $1 : the folder
    echo "Setting permissions for $1"
    sudo chown -R root "$1"
    sudo chgrp -R admin "$1"
    sudo chmod -R o+rx "$1"
    sudo chmod -R ug+rwx "$1"
}

sign_release()
{
echo "***************************************************"
echo "Code Signature (calling external script)"
echo "***************************************************"
	./codesign-om
echo "=> CODE SIGNATURE: DONE"
}

om_prep_final()
{
echo "***************************************************"
echo "Build dmg, Codesign, Send for Notorization"
echo "***************************************************"
        ./om_prepare_package_final.sh
echo "=> DONE"
}

   


#=============================
# MAIN SCRIPT
#=============================

# go to root to execute any command
cd ../../..

if 		[ $1 = "-d" ]; 		then 	deliver_app
elif	[ $1 = "-p" ];		then	pack_app; set_fonts
elif	[ $1 = "-dp" ];		then	deliver_app; pack_app; set_fonts
elif	[ $1 = "-n" ];		then	deliver_app; pack_app; set_fonts; om_prep_final
elif	[ $1 = "-dmg" ];	then	create_simple_dmg
elif	[ $1 = "-zip" ];	then	zip_release
elif	[ $1 = "-sign" ];	then	sign_release	
elif	[ $1 = "-dpd" ];	then	deliver_app; pack_app; set_fonts; create_simple_dmg
elif	[ $1 = "-dpz" ];	then	deliver_app; pack_app; set_fonts; zip_release
elif	[ $1 = "-lib" ];	then	pack_lib $2 $LIBS_RELEASE_FOLDER
elif	[ $1 = "-all" ];	then	deliver_app; pack_app; set_fonts; sign_release; zip_release; create_simple_dmg
else 	
	echo "Dont'know what to do! :("	
	echo "Options:"
	echo "-d = deliver app"
	echo "-p = pack delivered app as a separate folder (including fonts) "
	echo "-dp = deliver and pack"
	echo "-n = deliver, pack, create DMG, codesign and notorize"
	echo "-sign = sign delivered package"
	echo "-zip = create ZIP from previously packed app"
	echo "-dmg = create DMG from previously packed app"
	echo "-dpd = deliver, pack and create DMG"
	echo "-dpz = deliver, pack and zip"
	echo "-lib \"LIB_NAME\" = deliver a library in the default lib-delivery folder"
	echo "-all = deliver, pack, sign, zip and create DMG"
fi

# come back here
cd OPENMUSIC/build/mac/

exit 0







; OM File Header - Saved 2023/02/14 13:41:26
; (7.02 :patc (om-make-point 370 132) (om-make-point 768 396) (om-make-point 1076 597) "" 183 0 "2023/02/14 13:35:24" "2023/02/14 13:41:26")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "patch-w-UTF8 characters" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 85 42) (quote "check hover:$én tô trè") nil (om-make-point 745 256) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote én)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote tô)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote trè)))) (om-make-point 390 245) (om-make-point 318 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "textfile_décérébélé" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 52 115) (om-make-point 356 119) (load-buffer-textfile (quote ("\"¥ ² ³ µ ¹ À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ð Ñ Ò Ó Ô Õ Ö\"" "\"Ø Ù Ú Û Ü Ý Þ ß à á â ã ä å æ ç è é ê ë ì í î ï ð ñ ò ó\"" "\"ô õ ö ø ù ú û ü ý þ ÿ\"")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 634 69) (om-make-point 33 30) (quote trè) "trè" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 558 58) (om-make-point 29 30) (quote tô) "tô" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 467 68) (om-make-point 32 30) (quote én) "én" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote én)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote tô)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote trè)))) (om-make-point 419 125) (om-make-point 318 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 6 0 nil 0) (4 0 6 1 nil 0) (3 0 6 2 nil 0))) nil 7.02))